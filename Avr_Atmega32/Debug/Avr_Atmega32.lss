
Avr_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00003b8a  00003c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000b0  008000b0  00003c6e  2**0
                  ALLOC
  3 .stab         00004d04  00000000  00000000  00003c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003417  00000000  00000000  00008974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000becb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c03b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dc84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000eb6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f91c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fa7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fd09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000104d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 1a 	call	0x357e	; 0x357e <main>
      8a:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <gpio_pin_direction_initalize>:
 * 
 * @param pin_cnfg
 * @param dir
 * @return 
 */
Std_ReturnType gpio_pin_direction_initalize(const pin_config_t * pin_cnfg, direction_t dir) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <gpio_pin_direction_initalize+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <gpio_pin_direction_initalize+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <gpio_pin_direction_initalize+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9b 83       	std	Y+3, r25	; 0x03
     b56:	8a 83       	std	Y+2, r24	; 0x02
     b58:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_NOK;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == pin_cnfg) {
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	19 f4       	brne	.+6      	; 0xb6c <gpio_pin_direction_initalize+0x26>
		ret = E_NOK;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	54 c0       	rjmp	.+168    	; 0xc14 <gpio_pin_direction_initalize+0xce>
	} else {
		switch (dir) {
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	3e 83       	std	Y+6, r19	; 0x06
     b74:	2d 83       	std	Y+5, r18	; 0x05
     b76:	8d 81       	ldd	r24, Y+5	; 0x05
     b78:	9e 81       	ldd	r25, Y+6	; 0x06
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	31 f0       	breq	.+12     	; 0xb8a <gpio_pin_direction_initalize+0x44>
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	3e 81       	ldd	r19, Y+6	; 0x06
     b82:	21 30       	cpi	r18, 0x01	; 1
     b84:	31 05       	cpc	r19, r1
     b86:	11 f1       	breq	.+68     	; 0xbcc <gpio_pin_direction_initalize+0x86>
     b88:	43 c0       	rjmp	.+134    	; 0xc10 <gpio_pin_direction_initalize+0xca>
		case GPIO_PIN_OUTPOT:
			SET_BIT(ACCESS_REG((pin_cnfg->port) + 1), pin_cnfg->pin);
     b8a:	ea 81       	ldd	r30, Y+2	; 0x02
     b8c:	fb 81       	ldd	r31, Y+3	; 0x03
     b8e:	80 81       	ld	r24, Z
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	dc 01       	movw	r26, r24
     b98:	ea 81       	ldd	r30, Y+2	; 0x02
     b9a:	fb 81       	ldd	r31, Y+3	; 0x03
     b9c:	80 81       	ld	r24, Z
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	fc 01       	movw	r30, r24
     ba6:	80 81       	ld	r24, Z
     ba8:	48 2f       	mov	r20, r24
     baa:	ea 81       	ldd	r30, Y+2	; 0x02
     bac:	fb 81       	ldd	r31, Y+3	; 0x03
     bae:	81 81       	ldd	r24, Z+1	; 0x01
     bb0:	87 70       	andi	r24, 0x07	; 7
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <gpio_pin_direction_initalize+0x7c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <gpio_pin_direction_initalize+0x78>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	24 c0       	rjmp	.+72     	; 0xc14 <gpio_pin_direction_initalize+0xce>
			break;
		case GPIO_PIN_INPOT:
			CLEAR_BIT(ACCESS_REG((pin_cnfg->port) + 1), pin_cnfg->pin);
     bcc:	ea 81       	ldd	r30, Y+2	; 0x02
     bce:	fb 81       	ldd	r31, Y+3	; 0x03
     bd0:	80 81       	ld	r24, Z
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	dc 01       	movw	r26, r24
     bda:	ea 81       	ldd	r30, Y+2	; 0x02
     bdc:	fb 81       	ldd	r31, Y+3	; 0x03
     bde:	80 81       	ld	r24, Z
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	48 2f       	mov	r20, r24
     bec:	ea 81       	ldd	r30, Y+2	; 0x02
     bee:	fb 81       	ldd	r31, Y+3	; 0x03
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	87 70       	andi	r24, 0x07	; 7
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <gpio_pin_direction_initalize+0xbe>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <gpio_pin_direction_initalize+0xba>
     c08:	80 95       	com	r24
     c0a:	84 23       	and	r24, r20
     c0c:	8c 93       	st	X, r24
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <gpio_pin_direction_initalize+0xce>
			break;

		default:
			ret = E_NOK;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return ret;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
}
     c16:	26 96       	adiw	r28, 0x06	; 6
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <gpio_pin_get_direction_status>:
 * 
 * @param pin_cnfg
 * @param logic
 * @return 
 */
Std_ReturnType gpio_pin_get_direction_status(const pin_config_t * pin_cnfg, logic_t * logic) {
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <gpio_pin_get_direction_status+0x6>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <gpio_pin_get_direction_status+0x8>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	8a 83       	std	Y+2, r24	; 0x02
     c3a:	7d 83       	std	Y+5, r23	; 0x05
     c3c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
     c3e:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == pin_cnfg) || (NULL == logic)) {
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	21 f0       	breq	.+8      	; 0xc50 <gpio_pin_get_direction_status+0x28>
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	19 f4       	brne	.+6      	; 0xc56 <gpio_pin_get_direction_status+0x2e>
		ret = E_NOK;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	1b c0       	rjmp	.+54     	; 0xc8c <gpio_pin_get_direction_status+0x64>
	} else {
		*logic = READ_BIT(ACCESS_REG((pin_cnfg->port) + 1), pin_cnfg->pin);
     c56:	ea 81       	ldd	r30, Y+2	; 0x02
     c58:	fb 81       	ldd	r31, Y+3	; 0x03
     c5a:	80 81       	ld	r24, Z
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	fc 01       	movw	r30, r24
     c64:	80 81       	ld	r24, Z
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	ea 81       	ldd	r30, Y+2	; 0x02
     c6c:	fb 81       	ldd	r31, Y+3	; 0x03
     c6e:	81 81       	ldd	r24, Z+1	; 0x01
     c70:	87 70       	andi	r24, 0x07	; 7
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a9 01       	movw	r20, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <gpio_pin_get_direction_status+0x56>
     c7a:	55 95       	asr	r21
     c7c:	47 95       	ror	r20
     c7e:	8a 95       	dec	r24
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <gpio_pin_get_direction_status+0x52>
     c82:	ca 01       	movw	r24, r20
     c84:	81 70       	andi	r24, 0x01	; 1
     c86:	ec 81       	ldd	r30, Y+4	; 0x04
     c88:	fd 81       	ldd	r31, Y+5	; 0x05
     c8a:	80 83       	st	Z, r24

	}
	return ret;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <gpio_pin_write_logic>:
 * 
 * @param pin_cnfg
 * @param logic
 * @return 
 */
Std_ReturnType gpio_pin_write_logic(const pin_config_t * pin_cnfg, logic_t logic) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <gpio_pin_write_logic+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <gpio_pin_write_logic+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <gpio_pin_write_logic+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9b 83       	std	Y+3, r25	; 0x03
     cae:	8a 83       	std	Y+2, r24	; 0x02
     cb0:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
     cb2:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == pin_cnfg) {
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	9b 81       	ldd	r25, Y+3	; 0x03
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	19 f4       	brne	.+6      	; 0xcc2 <gpio_pin_write_logic+0x24>
		ret = E_NOK;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	54 c0       	rjmp	.+168    	; 0xd6a <gpio_pin_write_logic+0xcc>
	} else {
		switch (logic) {
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3e 83       	std	Y+6, r19	; 0x06
     cca:	2d 83       	std	Y+5, r18	; 0x05
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	39 f1       	breq	.+78     	; 0xd22 <gpio_pin_write_logic+0x84>
     cd4:	2d 81       	ldd	r18, Y+5	; 0x05
     cd6:	3e 81       	ldd	r19, Y+6	; 0x06
     cd8:	21 30       	cpi	r18, 0x01	; 1
     cda:	31 05       	cpc	r19, r1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <gpio_pin_write_logic+0x42>
     cde:	43 c0       	rjmp	.+134    	; 0xd66 <gpio_pin_write_logic+0xc8>
		case HIGH:
			SET_BIT(ACCESS_REG((pin_cnfg->port) + 2), pin_cnfg->pin);
     ce0:	ea 81       	ldd	r30, Y+2	; 0x02
     ce2:	fb 81       	ldd	r31, Y+3	; 0x03
     ce4:	80 81       	ld	r24, Z
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 96       	adiw	r24, 0x02	; 2
     cec:	dc 01       	movw	r26, r24
     cee:	ea 81       	ldd	r30, Y+2	; 0x02
     cf0:	fb 81       	ldd	r31, Y+3	; 0x03
     cf2:	80 81       	ld	r24, Z
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 96       	adiw	r24, 0x02	; 2
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	ea 81       	ldd	r30, Y+2	; 0x02
     d02:	fb 81       	ldd	r31, Y+3	; 0x03
     d04:	81 81       	ldd	r24, Z+1	; 0x01
     d06:	87 70       	andi	r24, 0x07	; 7
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <gpio_pin_write_logic+0x7a>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <gpio_pin_write_logic+0x76>
     d1c:	84 2b       	or	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	24 c0       	rjmp	.+72     	; 0xd6a <gpio_pin_write_logic+0xcc>
			break;
		case LOW:
			CLEAR_BIT(ACCESS_REG((pin_cnfg->port) + 2), pin_cnfg->pin);
     d22:	ea 81       	ldd	r30, Y+2	; 0x02
     d24:	fb 81       	ldd	r31, Y+3	; 0x03
     d26:	80 81       	ld	r24, Z
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 96       	adiw	r24, 0x02	; 2
     d2e:	dc 01       	movw	r26, r24
     d30:	ea 81       	ldd	r30, Y+2	; 0x02
     d32:	fb 81       	ldd	r31, Y+3	; 0x03
     d34:	80 81       	ld	r24, Z
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 96       	adiw	r24, 0x02	; 2
     d3c:	fc 01       	movw	r30, r24
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	ea 81       	ldd	r30, Y+2	; 0x02
     d44:	fb 81       	ldd	r31, Y+3	; 0x03
     d46:	81 81       	ldd	r24, Z+1	; 0x01
     d48:	87 70       	andi	r24, 0x07	; 7
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <gpio_pin_write_logic+0xbc>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <gpio_pin_write_logic+0xb8>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <gpio_pin_write_logic+0xcc>
			break;

		default:
			ret = E_NOK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return ret;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6c:	26 96       	adiw	r28, 0x06	; 6
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <gpio_pin_read>:
 * 
 * @param pin_cnfg
 * @param logic
 * @return 
 */
Std_ReturnType gpio_pin_read(const pin_config_t * pin_cnfg, logic_t * logic) {
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <gpio_pin_read+0x6>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <gpio_pin_read+0x8>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	7d 83       	std	Y+5, r23	; 0x05
     d92:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
     d94:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == pin_cnfg) || (NULL == logic)) {
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	21 f0       	breq	.+8      	; 0xda6 <gpio_pin_read+0x28>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	19 f4       	brne	.+6      	; 0xdac <gpio_pin_read+0x2e>
		ret = E_NOK;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	1a c0       	rjmp	.+52     	; 0xde0 <gpio_pin_read+0x62>
	} else {
		*logic = READ_BIT(ACCESS_REG(pin_cnfg->port), pin_cnfg->pin);
     dac:	ea 81       	ldd	r30, Y+2	; 0x02
     dae:	fb 81       	ldd	r31, Y+3	; 0x03
     db0:	80 81       	ld	r24, Z
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	fc 01       	movw	r30, r24
     db8:	80 81       	ld	r24, Z
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	ea 81       	ldd	r30, Y+2	; 0x02
     dc0:	fb 81       	ldd	r31, Y+3	; 0x03
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	87 70       	andi	r24, 0x07	; 7
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a9 01       	movw	r20, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <gpio_pin_read+0x54>
     dce:	55 95       	asr	r21
     dd0:	47 95       	ror	r20
     dd2:	8a 95       	dec	r24
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <gpio_pin_read+0x50>
     dd6:	ca 01       	movw	r24, r20
     dd8:	81 70       	andi	r24, 0x01	; 1
     dda:	ec 81       	ldd	r30, Y+4	; 0x04
     ddc:	fd 81       	ldd	r31, Y+5	; 0x05
     dde:	80 83       	st	Z, r24

	}
	return ret;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <gpio_pin_toggle>:
/**
 * 
 * @param pin_cnfg
 * @return 
 */
Std_ReturnType gpio_pin_toggle(const pin_config_t * pin_cnfg) {
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <gpio_pin_toggle+0x6>
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9b 83       	std	Y+3, r25	; 0x03
     e00:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     e02:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == pin_cnfg) {
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	19 f4       	brne	.+6      	; 0xe12 <gpio_pin_toggle+0x20>
		ret = E_NOK;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	20 c0       	rjmp	.+64     	; 0xe52 <gpio_pin_toggle+0x60>
	} else {
		TOGGLE_BIT(ACCESS_REG((pin_cnfg->port) + 2), pin_cnfg->pin);
     e12:	ea 81       	ldd	r30, Y+2	; 0x02
     e14:	fb 81       	ldd	r31, Y+3	; 0x03
     e16:	80 81       	ld	r24, Z
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 96       	adiw	r24, 0x02	; 2
     e1e:	dc 01       	movw	r26, r24
     e20:	ea 81       	ldd	r30, Y+2	; 0x02
     e22:	fb 81       	ldd	r31, Y+3	; 0x03
     e24:	80 81       	ld	r24, Z
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 96       	adiw	r24, 0x02	; 2
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	ea 81       	ldd	r30, Y+2	; 0x02
     e34:	fb 81       	ldd	r31, Y+3	; 0x03
     e36:	81 81       	ldd	r24, Z+1	; 0x01
     e38:	87 70       	andi	r24, 0x07	; 7
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <gpio_pin_toggle+0x58>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <gpio_pin_toggle+0x54>
     e4e:	84 27       	eor	r24, r20
     e50:	8c 93       	st	X, r24
	}
	return ret;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <gpio_pin_initalize>:
/**
 * 
 * @param pin_cnfg
 * @return 
 */
Std_ReturnType gpio_pin_initalize(const pin_config_t * pin_cnfg) {
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <gpio_pin_initalize+0x6>
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	9b 83       	std	Y+3, r25	; 0x03
     e6e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     e70:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == pin_cnfg) {
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	19 f4       	brne	.+6      	; 0xe80 <gpio_pin_initalize+0x20>
		ret = E_NOK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	1b c0       	rjmp	.+54     	; 0xeb6 <gpio_pin_initalize+0x56>
	} else {
		ret = gpio_pin_direction_initalize(pin_cnfg, pin_cnfg->direction);
     e80:	ea 81       	ldd	r30, Y+2	; 0x02
     e82:	fb 81       	ldd	r31, Y+3	; 0x03
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	86 95       	lsr	r24
     e88:	86 95       	lsr	r24
     e8a:	86 95       	lsr	r24
     e8c:	81 70       	andi	r24, 0x01	; 1
     e8e:	28 2f       	mov	r18, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	9b 81       	ldd	r25, Y+3	; 0x03
     e94:	62 2f       	mov	r22, r18
     e96:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
     e9a:	89 83       	std	Y+1, r24	; 0x01
		ret = gpio_pin_write_logic(pin_cnfg, pin_cnfg->logic);
     e9c:	ea 81       	ldd	r30, Y+2	; 0x02
     e9e:	fb 81       	ldd	r31, Y+3	; 0x03
     ea0:	81 81       	ldd	r24, Z+1	; 0x01
     ea2:	82 95       	swap	r24
     ea4:	8f 70       	andi	r24, 0x0F	; 15
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	28 2f       	mov	r18, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	62 2f       	mov	r22, r18
     eb0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
     eb4:	89 83       	std	Y+1, r24	; 0x01

	}
	return ret;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <gpio_port_direction_intialize>:
 * 
 * @param port
 * @param direction
 * @return 
 */
Std_ReturnType gpio_port_direction_intialize(port_index_t port, direction_t direction) {
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <gpio_port_direction_intialize+0x6>
     eca:	00 d0       	rcall	.+0      	; 0xecc <gpio_port_direction_intialize+0x8>
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	8a 83       	std	Y+2, r24	; 0x02
     ed4:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
     ed6:	19 82       	std	Y+1, r1	; 0x01
	switch (direction) {
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3d 83       	std	Y+5, r19	; 0x05
     ee0:	2c 83       	std	Y+4, r18	; 0x04
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	31 f0       	breq	.+12     	; 0xef6 <gpio_port_direction_intialize+0x32>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	21 30       	cpi	r18, 0x01	; 1
     ef0:	31 05       	cpc	r19, r1
     ef2:	49 f0       	breq	.+18     	; 0xf06 <gpio_port_direction_intialize+0x42>
     ef4:	0f c0       	rjmp	.+30     	; 0xf14 <gpio_port_direction_intialize+0x50>
	case GPIO_PIN_OUTPOT:
		SET_REG(port+1);
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	fc 01       	movw	r30, r24
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	80 83       	st	Z, r24
     f04:	09 c0       	rjmp	.+18     	; 0xf18 <gpio_port_direction_intialize+0x54>
		break;
	case GPIO_PIN_INPOT:
		CLEAR_REG(port+1);
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	fc 01       	movw	r30, r24
     f10:	10 82       	st	Z, r1
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <gpio_port_direction_intialize+0x54>
		break;
	default:
		ret = E_NOK;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	89 83       	std	Y+1, r24	; 0x01

	}
	return ret;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <gpio_port_get_direction_status>:
 * @param port
 * @param direction_status
 * @return 
 */
Std_ReturnType gpio_port_get_direction_status(port_index_t port, uint8 *direction_status)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <gpio_port_get_direction_status+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <gpio_port_get_direction_status+0x8>
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	7c 83       	std	Y+4, r23	; 0x04
     f3a:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
     f3c:	19 82       	std	Y+1, r1	; 0x01

	return ret;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <gpio_port_write_logic>:
 * @param port
 * @param logic
 * @return 
 */
Std_ReturnType gpio_port_write_logic(port_index_t port, logic_t logic)
		{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <gpio_port_write_logic+0x6>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8a 83       	std	Y+2, r24	; 0x02
     f5c:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_NOK;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	89 83       	std	Y+1, r24	; 0x01
	if((port == PORTA) ||(port == PORTB) ||(port == PORTC) ||(port == PORTD)  )
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	89 33       	cpi	r24, 0x39	; 57
     f66:	49 f0       	breq	.+18     	; 0xf7a <gpio_port_write_logic+0x2c>
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	86 33       	cpi	r24, 0x36	; 54
     f6c:	31 f0       	breq	.+12     	; 0xf7a <gpio_port_write_logic+0x2c>
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	83 33       	cpi	r24, 0x33	; 51
     f72:	19 f0       	breq	.+6      	; 0xf7a <gpio_port_write_logic+0x2c>
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 33       	cpi	r24, 0x30	; 48
     f78:	49 f4       	brne	.+18     	; 0xf8c <gpio_port_write_logic+0x3e>
		{
			ret = E_NOK;
		}
		else
		{
			ACCESS_REG(port +2) = logic;
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 96       	adiw	r24, 0x02	; 2
     f82:	fc 01       	movw	r30, r24
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	80 83       	st	Z, r24

			ret = E_OK;
     f88:	19 82       	std	Y+1, r1	; 0x01
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <gpio_port_write_logic+0x42>
		}

	}
	else
	{
		ret = E_NOK;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
		}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <gpio_port_read_logic>:
 * @param port
 * @param logic
 * @return 
 */
Std_ReturnType gpio_port_read_logic(port_index_t port, uint8 *logic)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <gpio_port_read_logic+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <gpio_port_read_logic+0x8>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	7c 83       	std	Y+4, r23	; 0x04
     fae:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
     fb0:	19 82       	std	Y+1, r1	; 0x01

	return ret;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <gpio_port_toggle_logic>:
 * 
 * @param port
 * @return 
 */
Std_ReturnType gpio_port_toggle_logic(port_index_t port)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <gpio_port_toggle_logic+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     fce:	19 82       	std	Y+1, r1	; 0x01

	return ret;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <SSD_BCD_Inialize>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/

Std_ReturnType SSD_BCD_Inialize(SSD_BCD_cnfg_t * ssd_obj)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <SSD_BCD_Inialize+0x6>
     fe2:	0f 92       	push	r0
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	9b 83       	std	Y+3, r25	; 0x03
     fea:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ssd_obj)
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	19 f4       	brne	.+6      	; 0xffe <SSD_BCD_Inialize+0x22>
	{
		ret = E_NOK;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	22 c0       	rjmp	.+68     	; 0x1042 <SSD_BCD_Inialize+0x66>
	}
	else
	{
		ret = gpio_pin_direction_initalize(&(ssd_obj->pins_cnfg[0]), GPIO_PIN_OUTPOT);
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
    1008:	89 83       	std	Y+1, r24	; 0x01
		ret = gpio_pin_direction_initalize(&(ssd_obj->pins_cnfg[1]), GPIO_PIN_OUTPOT);
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	02 96       	adiw	r24, 0x02	; 2
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
    1016:	89 83       	std	Y+1, r24	; 0x01
		ret = gpio_pin_direction_initalize(&(ssd_obj->pins_cnfg[2]), GPIO_PIN_OUTPOT);
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	04 96       	adiw	r24, 0x04	; 4
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
    1024:	89 83       	std	Y+1, r24	; 0x01
		ret = gpio_pin_direction_initalize(&(ssd_obj->pins_cnfg[3]), GPIO_PIN_OUTPOT);
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	06 96       	adiw	r24, 0x06	; 6
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
    1032:	89 83       	std	Y+1, r24	; 0x01

		ret = gpio_pin_direction_initalize(&(ssd_obj->ctrl_pin), GPIO_PIN_OUTPOT);
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	9b 81       	ldd	r25, Y+3	; 0x03
    1038:	08 96       	adiw	r24, 0x08	; 8
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
    1040:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <SSD_BCD_Print_Num>:
Std_ReturnType SSD_BCD_Print_Num(SSD_BCD_cnfg_t * ssd_obj, uint8 Num)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <SSD_BCD_Print_Num+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <SSD_BCD_Print_Num+0x8>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_NOK;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
	if((NULL == ssd_obj) || ( Num > 9) || (Num < 0 ))
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	19 f0       	breq	.+6      	; 0x1074 <SSD_BCD_Print_Num+0x24>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	8a 30       	cpi	r24, 0x0A	; 10
    1072:	18 f0       	brcs	.+6      	; 0x107a <SSD_BCD_Print_Num+0x2a>
	{
		ret = E_NOK;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	34 c0       	rjmp	.+104    	; 0x10e2 <SSD_BCD_Print_Num+0x92>
	}
	else
	{
		gpio_pin_write_logic(&(ssd_obj->pins_cnfg[0]), (Num >> 0) & (0x01));
    107a:	2a 81       	ldd	r18, Y+2	; 0x02
    107c:	3b 81       	ldd	r19, Y+3	; 0x03
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	48 2f       	mov	r20, r24
    1082:	41 70       	andi	r20, 0x01	; 1
    1084:	c9 01       	movw	r24, r18
    1086:	64 2f       	mov	r22, r20
    1088:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(ssd_obj->pins_cnfg[1]), (Num >> 1) & (0x01));
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	9c 01       	movw	r18, r24
    1092:	2e 5f       	subi	r18, 0xFE	; 254
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	86 95       	lsr	r24
    109a:	48 2f       	mov	r20, r24
    109c:	41 70       	andi	r20, 0x01	; 1
    109e:	c9 01       	movw	r24, r18
    10a0:	64 2f       	mov	r22, r20
    10a2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(ssd_obj->pins_cnfg[2]), (Num >> 2) & (0x01));
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	9b 81       	ldd	r25, Y+3	; 0x03
    10aa:	9c 01       	movw	r18, r24
    10ac:	2c 5f       	subi	r18, 0xFC	; 252
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	86 95       	lsr	r24
    10b4:	86 95       	lsr	r24
    10b6:	48 2f       	mov	r20, r24
    10b8:	41 70       	andi	r20, 0x01	; 1
    10ba:	c9 01       	movw	r24, r18
    10bc:	64 2f       	mov	r22, r20
    10be:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(ssd_obj->pins_cnfg[3]), (Num >> 3) & (0x01));
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	9c 01       	movw	r18, r24
    10c8:	2a 5f       	subi	r18, 0xFA	; 250
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	86 95       	lsr	r24
    10d0:	86 95       	lsr	r24
    10d2:	86 95       	lsr	r24
    10d4:	48 2f       	mov	r20, r24
    10d6:	41 70       	andi	r20, 0x01	; 1
    10d8:	c9 01       	movw	r24, r18
    10da:	64 2f       	mov	r22, r20
    10dc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    10e0:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <SSD_BCD_Print_char>:
Std_ReturnType SSD_BCD_Print_char(SSD_BCD_cnfg_t * ssd_obj)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <SSD_BCD_Print_char+0x6>
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	9b 83       	std	Y+3, r25	; 0x03
    1100:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ssd_obj)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	19 f4       	brne	.+6      	; 0x1114 <SSD_BCD_Print_char+0x22>
	{
		ret = E_NOK;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <SSD_BCD_Print_char+0x24>
	}
	else
	{


		ret = E_OK;
    1114:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1116:	89 81       	ldd	r24, Y+1	; 0x01
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <SSD_BCD_Enable>:

Std_ReturnType SSD_BCD_Enable(SSD_BCD_cnfg_t * ssd_obj)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <SSD_BCD_Enable+0x6>
    112a:	0f 92       	push	r0
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	9b 83       	std	Y+3, r25	; 0x03
    1132:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ssd_obj)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	19 f4       	brne	.+6      	; 0x1146 <SSD_BCD_Enable+0x22>
	{
		ret = E_NOK;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <SSD_BCD_Enable+0x3e>
	}
	else
	{
		PIN_CONTROL =ssd_obj->ctrl_pin;
    1146:	ea 81       	ldd	r30, Y+2	; 0x02
    1148:	fb 81       	ldd	r31, Y+3	; 0x03
    114a:	80 85       	ldd	r24, Z+8	; 0x08
    114c:	91 85       	ldd	r25, Z+9	; 0x09
    114e:	90 93 b1 00 	sts	0x00B1, r25
    1152:	80 93 b0 00 	sts	0x00B0, r24

		gpio_pin_write_logic(&PIN_CONTROL, HIGH);
    1156:	80 eb       	ldi	r24, 0xB0	; 176
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    1160:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <SSD_BCD_Disable>:
Std_ReturnType SSD_BCD_Disable(SSD_BCD_cnfg_t * ssd_obj)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <SSD_BCD_Disable+0x6>
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9b 83       	std	Y+3, r25	; 0x03
    117e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ssd_obj)
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	19 f4       	brne	.+6      	; 0x1192 <SSD_BCD_Disable+0x22>
	{
		ret = E_NOK;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <SSD_BCD_Disable+0x3e>
	}
	else
	{
		PIN_CONTROL = ssd_obj->ctrl_pin;
    1192:	ea 81       	ldd	r30, Y+2	; 0x02
    1194:	fb 81       	ldd	r31, Y+3	; 0x03
    1196:	80 85       	ldd	r24, Z+8	; 0x08
    1198:	91 85       	ldd	r25, Z+9	; 0x09
    119a:	90 93 b1 00 	sts	0x00B1, r25
    119e:	80 93 b0 00 	sts	0x00B0, r24
		gpio_pin_write_logic(&PIN_CONTROL, LOW);
    11a2:	80 eb       	ldi	r24, 0xB0	; 176
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    11ac:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <SSD_Inialize>:

/************************************
 * GLOBAL FUNCTIONS
 ************************************/
Std_ReturnType SSD_Inialize(SSD_cnfg_t * ssd_obj)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <SSD_Inialize+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <SSD_Inialize+0x8>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9c 83       	std	Y+4, r25	; 0x04
    11ca:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_NOK;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == ssd_obj)
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	19 f4       	brne	.+6      	; 0x11de <SSD_Inialize+0x22>
	{
		ret = E_NOK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8a 83       	std	Y+2, r24	; 0x02
    11dc:	21 c0       	rjmp	.+66     	; 0x1220 <SSD_Inialize+0x64>
	}
	else
	{
		uint8 Loc_Counter =1 ;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
		for(Loc_Counter = 1; Loc_Counter < 9; ++Loc_Counter)
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	12 c0       	rjmp	.+36     	; 0x120c <SSD_Inialize+0x50>
		{
			ssd_obj->pin.pin = Loc_Counter;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	87 70       	andi	r24, 0x07	; 7
    11ec:	eb 81       	ldd	r30, Y+3	; 0x03
    11ee:	fc 81       	ldd	r31, Y+4	; 0x04
    11f0:	98 2f       	mov	r25, r24
    11f2:	97 70       	andi	r25, 0x07	; 7
    11f4:	81 81       	ldd	r24, Z+1	; 0x01
    11f6:	88 7f       	andi	r24, 0xF8	; 248
    11f8:	89 2b       	or	r24, r25
    11fa:	81 83       	std	Z+1, r24	; 0x01
			gpio_pin_direction_initalize(&(ssd_obj->pin), GPIO_PIN_OUTPOT);
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
		ret = E_NOK;
	}
	else
	{
		uint8 Loc_Counter =1 ;
		for(Loc_Counter = 1; Loc_Counter < 9; ++Loc_Counter)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	89 30       	cpi	r24, 0x09	; 9
    1210:	58 f3       	brcs	.-42     	; 0x11e8 <SSD_Inialize+0x2c>
			ssd_obj->pin.pin = Loc_Counter;
			gpio_pin_direction_initalize(&(ssd_obj->pin), GPIO_PIN_OUTPOT);

		}

		gpio_pin_direction_initalize(&(ssd_obj->ctrl_pin), GPIO_PIN_OUTPOT);
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	03 96       	adiw	r24, 0x03	; 3
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>

		ret = E_OK;
    121e:	1a 82       	std	Y+2, r1	; 0x02
	}

	return ret;
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <SSD_Print_Num>:
Std_ReturnType SSD_Print_Num(SSD_cnfg_t * ssd_obj, uint8 Num)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <SSD_Print_Num+0x6>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <SSD_Print_Num+0x8>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	9b 83       	std	Y+3, r25	; 0x03
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_NOK;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
	if((NULL == ssd_obj) || (Num >9) || (Num < 0))
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	19 f0       	breq	.+6      	; 0x1254 <SSD_Print_Num+0x24>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	8a 30       	cpi	r24, 0x0A	; 10
    1252:	18 f0       	brcs	.+6      	; 0x125a <SSD_Print_Num+0x2a>
	{
		ret = E_NOK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	30 c0       	rjmp	.+96     	; 0x12ba <SSD_Print_Num+0x8a>
	}
	else
	{

		if(COMMON_ANODE == ssd_obj->ssd_type )
    125a:	ea 81       	ldd	r30, Y+2	; 0x02
    125c:	fb 81       	ldd	r31, Y+3	; 0x03
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	89 f4       	brne	.+34     	; 0x1286 <SSD_Print_Num+0x56>
		{
			gpio_port_write_logic(ssd_obj->pin.port, SSD_Pattern[Num] << 1 );
    1264:	ea 81       	ldd	r30, Y+2	; 0x02
    1266:	fb 81       	ldd	r31, Y+3	; 0x03
    1268:	20 81       	ld	r18, Z
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fc 01       	movw	r30, r24
    1272:	eb 55       	subi	r30, 0x5B	; 91
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	98 2f       	mov	r25, r24
    127a:	99 0f       	add	r25, r25
    127c:	82 2f       	mov	r24, r18
    127e:	69 2f       	mov	r22, r25
    1280:	0e 94 a7 07 	call	0xf4e	; 0xf4e <gpio_port_write_logic>
    1284:	19 c0       	rjmp	.+50     	; 0x12b8 <SSD_Print_Num+0x88>
		}
		else if(COMMON_CATHOD == ssd_obj->ssd_type )
    1286:	ea 81       	ldd	r30, Y+2	; 0x02
    1288:	fb 81       	ldd	r31, Y+3	; 0x03
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	88 23       	and	r24, r24
    128e:	91 f4       	brne	.+36     	; 0x12b4 <SSD_Print_Num+0x84>
		{
			gpio_port_write_logic(ssd_obj->pin.port, (~SSD_Pattern[Num]) << 1);
    1290:	ea 81       	ldd	r30, Y+2	; 0x02
    1292:	fb 81       	ldd	r31, Y+3	; 0x03
    1294:	20 81       	ld	r18, Z
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	eb 55       	subi	r30, 0x5B	; 91
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	80 95       	com	r24
    12a6:	98 2f       	mov	r25, r24
    12a8:	99 0f       	add	r25, r25
    12aa:	82 2f       	mov	r24, r18
    12ac:	69 2f       	mov	r22, r25
    12ae:	0e 94 a7 07 	call	0xf4e	; 0xf4e <gpio_port_write_logic>
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <SSD_Print_Num+0x88>
		}
		else
		{
			ret = E_NOK;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	89 83       	std	Y+1, r24	; 0x01
		}

		ret = E_OK;
    12b8:	19 82       	std	Y+1, r1	; 0x01

	}

	return ret;
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <SSD_Enable>:

Std_ReturnType SSD_Enable(SSD_cnfg_t * ssd_obj)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <SSD_Enable+0x6>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	9b 83       	std	Y+3, r25	; 0x03
    12d8:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ssd_obj)
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	19 f4       	brne	.+6      	; 0x12ec <SSD_Enable+0x22>
	{
		ret = E_NOK;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <SSD_Enable+0x3e>
	}
	else
	{
		PIN_CONTROL =ssd_obj->ctrl_pin;
    12ec:	ea 81       	ldd	r30, Y+2	; 0x02
    12ee:	fb 81       	ldd	r31, Y+3	; 0x03
    12f0:	83 81       	ldd	r24, Z+3	; 0x03
    12f2:	94 81       	ldd	r25, Z+4	; 0x04
    12f4:	90 93 b3 00 	sts	0x00B3, r25
    12f8:	80 93 b2 00 	sts	0x00B2, r24

		gpio_pin_write_logic(&PIN_CONTROL, HIGH);
    12fc:	82 eb       	ldi	r24, 0xB2	; 178
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    1306:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1308:	89 81       	ldd	r24, Y+1	; 0x01
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <SSD_Disable>:
Std_ReturnType SSD_Disable(SSD_cnfg_t * ssd_obj)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <SSD_Disable+0x6>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ssd_obj)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	19 f4       	brne	.+6      	; 0x1338 <SSD_Disable+0x22>
	{
		ret = E_NOK;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <SSD_Disable+0x3e>
	}
	else
	{
		PIN_CONTROL = ssd_obj->ctrl_pin;
    1338:	ea 81       	ldd	r30, Y+2	; 0x02
    133a:	fb 81       	ldd	r31, Y+3	; 0x03
    133c:	83 81       	ldd	r24, Z+3	; 0x03
    133e:	94 81       	ldd	r25, Z+4	; 0x04
    1340:	90 93 b3 00 	sts	0x00B3, r25
    1344:	80 93 b2 00 	sts	0x00B2, r24
		gpio_pin_write_logic(&PIN_CONTROL, LOW);
    1348:	82 eb       	ldi	r24, 0xB2	; 178
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    1352:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <SSD_2Digit_Inialize>:

Std_ReturnType SSD_2Digit_Inialize(SSD_2Digit_t * ssd_obj)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <SSD_2Digit_Inialize+0x6>
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	9b 83       	std	Y+3, r25	; 0x03
    1370:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ssd_obj)
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	19 f4       	brne	.+6      	; 0x1384 <SSD_2Digit_Inialize+0x22>
	{
		ret = E_NOK;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <SSD_2Digit_Inialize+0x34>
	}
	else
	{
		SSD_Inialize(&(ssd_obj->SSD[0]));
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	0e 94 de 08 	call	0x11bc	; 0x11bc <SSD_Inialize>
		SSD_Inialize(&(ssd_obj->SSD[1]));
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	9b 81       	ldd	r25, Y+3	; 0x03
    1390:	05 96       	adiw	r24, 0x05	; 5
    1392:	0e 94 de 08 	call	0x11bc	; 0x11bc <SSD_Inialize>
	}

	return ret;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <SSD_Print_2Digit>:

Std_ReturnType SSD_Print_2Digit(SSD_2Digit_t * ssd_obj, uint8 Num)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	a2 97       	sbiw	r28, 0x22	; 34
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	99 a3       	std	Y+33, r25	; 0x21
    13ba:	88 a3       	std	Y+32, r24	; 0x20
    13bc:	6a a3       	std	Y+34, r22	; 0x22
	Std_ReturnType ret = E_NOK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 Loc_Num1 = Num  % 10;
    13c2:	8a a1       	ldd	r24, Y+34	; 0x22
    13c4:	9a e0       	ldi	r25, 0x0A	; 10
    13c6:	69 2f       	mov	r22, r25
    13c8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__udivmodqi4>
    13cc:	89 2f       	mov	r24, r25
    13ce:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 Loc_Num2 = Num  / 10;
    13d0:	8a a1       	ldd	r24, Y+34	; 0x22
    13d2:	9a e0       	ldi	r25, 0x0A	; 10
    13d4:	69 2f       	mov	r22, r25
    13d6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__udivmodqi4>
    13da:	8d 8f       	std	Y+29, r24	; 0x1d
	if(NULL == ssd_obj)
    13dc:	88 a1       	ldd	r24, Y+32	; 0x20
    13de:	99 a1       	ldd	r25, Y+33	; 0x21
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	19 f4       	brne	.+6      	; 0x13ea <SSD_Print_2Digit+0x46>
	{
		ret = E_NOK;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	8f 8f       	std	Y+31, r24	; 0x1f
    13e8:	01 c1       	rjmp	.+514    	; 0x15ec <SSD_Print_2Digit+0x248>
	}
	else
	{
		SSD_Enable(&(ssd_obj->SSD[0]));
    13ea:	88 a1       	ldd	r24, Y+32	; 0x20
    13ec:	99 a1       	ldd	r25, Y+33	; 0x21
    13ee:	0e 94 65 09 	call	0x12ca	; 0x12ca <SSD_Enable>
		SSD_Print_Num(&(ssd_obj->SSD[0]), Loc_Num1);
    13f2:	88 a1       	ldd	r24, Y+32	; 0x20
    13f4:	99 a1       	ldd	r25, Y+33	; 0x21
    13f6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    13f8:	0e 94 18 09 	call	0x1230	; 0x1230 <SSD_Print_Num>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a0 e2       	ldi	r26, 0x20	; 32
    1402:	b1 e4       	ldi	r27, 0x41	; 65
    1404:	89 8f       	std	Y+25, r24	; 0x19
    1406:	9a 8f       	std	Y+26, r25	; 0x1a
    1408:	ab 8f       	std	Y+27, r26	; 0x1b
    140a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140c:	69 8d       	ldd	r22, Y+25	; 0x19
    140e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4a e7       	ldi	r20, 0x7A	; 122
    141a:	55 e4       	ldi	r21, 0x45	; 69
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8d 8b       	std	Y+21, r24	; 0x15
    1426:	9e 8b       	std	Y+22, r25	; 0x16
    1428:	af 8b       	std	Y+23, r26	; 0x17
    142a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    142c:	6d 89       	ldd	r22, Y+21	; 0x15
    142e:	7e 89       	ldd	r23, Y+22	; 0x16
    1430:	8f 89       	ldd	r24, Y+23	; 0x17
    1432:	98 8d       	ldd	r25, Y+24	; 0x18
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	2c f4       	brge	.+10     	; 0x144e <SSD_Print_2Digit+0xaa>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9c 8b       	std	Y+20, r25	; 0x14
    144a:	8b 8b       	std	Y+19, r24	; 0x13
    144c:	3f c0       	rjmp	.+126    	; 0x14cc <SSD_Print_2Digit+0x128>
	else if (__tmp > 65535)
    144e:	6d 89       	ldd	r22, Y+21	; 0x15
    1450:	7e 89       	ldd	r23, Y+22	; 0x16
    1452:	8f 89       	ldd	r24, Y+23	; 0x17
    1454:	98 8d       	ldd	r25, Y+24	; 0x18
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	4c f5       	brge	.+82     	; 0x14b8 <SSD_Print_2Digit+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	69 8d       	ldd	r22, Y+25	; 0x19
    1468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    146c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e2       	ldi	r20, 0x20	; 32
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9c 8b       	std	Y+20, r25	; 0x14
    148c:	8b 8b       	std	Y+19, r24	; 0x13
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <SSD_Print_2Digit+0x10a>
    1490:	80 e9       	ldi	r24, 0x90	; 144
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	9a 8b       	std	Y+18, r25	; 0x12
    1496:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1498:	89 89       	ldd	r24, Y+17	; 0x11
    149a:	9a 89       	ldd	r25, Y+18	; 0x12
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <SSD_Print_2Digit+0xf8>
    14a0:	9a 8b       	std	Y+18, r25	; 0x12
    14a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a4:	8b 89       	ldd	r24, Y+19	; 0x13
    14a6:	9c 89       	ldd	r25, Y+20	; 0x14
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	9c 8b       	std	Y+20, r25	; 0x14
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	69 f7       	brne	.-38     	; 0x1490 <SSD_Print_2Digit+0xec>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <SSD_Print_2Digit+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9c 8b       	std	Y+20, r25	; 0x14
    14ca:	8b 8b       	std	Y+19, r24	; 0x13
    14cc:	8b 89       	ldd	r24, Y+19	; 0x13
    14ce:	9c 89       	ldd	r25, Y+20	; 0x14
    14d0:	98 8b       	std	Y+16, r25	; 0x10
    14d2:	8f 87       	std	Y+15, r24	; 0x0f
    14d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d6:	98 89       	ldd	r25, Y+16	; 0x10
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <SSD_Print_2Digit+0x134>
    14dc:	98 8b       	std	Y+16, r25	; 0x10
    14de:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		SSD_Disable(&(ssd_obj->SSD[0]));
    14e0:	88 a1       	ldd	r24, Y+32	; 0x20
    14e2:	99 a1       	ldd	r25, Y+33	; 0x21
    14e4:	0e 94 8b 09 	call	0x1316	; 0x1316 <SSD_Disable>

		SSD_Enable(&(ssd_obj->SSD[1]));
    14e8:	88 a1       	ldd	r24, Y+32	; 0x20
    14ea:	99 a1       	ldd	r25, Y+33	; 0x21
    14ec:	05 96       	adiw	r24, 0x05	; 5
    14ee:	0e 94 65 09 	call	0x12ca	; 0x12ca <SSD_Enable>
		SSD_Print_Num(&(ssd_obj->SSD[1]), Loc_Num2);
    14f2:	88 a1       	ldd	r24, Y+32	; 0x20
    14f4:	99 a1       	ldd	r25, Y+33	; 0x21
    14f6:	05 96       	adiw	r24, 0x05	; 5
    14f8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    14fa:	0e 94 18 09 	call	0x1230	; 0x1230 <SSD_Print_Num>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e2       	ldi	r26, 0x20	; 32
    1504:	b1 e4       	ldi	r27, 0x41	; 65
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    1508:	9c 87       	std	Y+12, r25	; 0x0c
    150a:	ad 87       	std	Y+13, r26	; 0x0d
    150c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a e7       	ldi	r20, 0x7A	; 122
    151c:	55 e4       	ldi	r21, 0x45	; 69
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8f 83       	std	Y+7, r24	; 0x07
    1528:	98 87       	std	Y+8, r25	; 0x08
    152a:	a9 87       	std	Y+9, r26	; 0x09
    152c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <SSD_Print_2Digit+0x1ac>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <SSD_Print_2Digit+0x22a>
	else if (__tmp > 65535)
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <SSD_Print_2Digit+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <SSD_Print_2Digit+0x20c>
    1592:	80 e9       	ldi	r24, 0x90	; 144
    1594:	91 e0       	ldi	r25, 0x01	; 1
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <SSD_Print_2Digit+0x1fa>
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <SSD_Print_2Digit+0x1ee>
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <SSD_Print_2Digit+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <SSD_Print_2Digit+0x236>
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		SSD_Disable(&(ssd_obj->SSD[1]));
    15e2:	88 a1       	ldd	r24, Y+32	; 0x20
    15e4:	99 a1       	ldd	r25, Y+33	; 0x21
    15e6:	05 96       	adiw	r24, 0x05	; 5
    15e8:	0e 94 8b 09 	call	0x1316	; 0x1316 <SSD_Disable>

	}

	return ret;
    15ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    15ee:	a2 96       	adiw	r28, 0x22	; 34
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <button_initialize>:
/**
 *
 * @param btn
 * @return
 */
Std_ReturnType button_initialize(const button_t *btn){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <button_initialize+0x6>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    1610:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == btn){
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	19 f4       	brne	.+6      	; 0x1620 <button_initialize+0x20>
        ret = E_NOK;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	06 c0       	rjmp	.+12     	; 0x162c <button_initialize+0x2c>
    }
    else{
        ret = gpio_pin_direction_initalize(&(btn->button_pin), GPIO_PIN_INPOT);
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	0e 94 a3 05 	call	0xb46	; 0xb46 <gpio_pin_direction_initalize>
    162a:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <button_read_state>:
 * @param btn_state button state @ref button_state_t
 * @return  Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOK) : The function has issue while performing this action
 */
Std_ReturnType button_read_state(const button_t *btn, button_state_t *btn_state){
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	28 97       	sbiw	r28, 0x08	; 8
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
    1652:	78 87       	std	Y+8, r23	; 0x08
    1654:	6f 83       	std	Y+7, r22	; 0x07
    Std_ReturnType ret = E_NOK;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	89 83       	std	Y+1, r24	; 0x01
    logic_t btn_Logic_Status = LOW;
    165a:	1a 82       	std	Y+2, r1	; 0x02
    pin_config_t loc_pin ={.port = btn->button_pin.port, .port = btn->button_pin.pin};
    165c:	ed 81       	ldd	r30, Y+5	; 0x05
    165e:	fe 81       	ldd	r31, Y+6	; 0x06
    1660:	81 81       	ldd	r24, Z+1	; 0x01
    1662:	87 70       	andi	r24, 0x07	; 7
    1664:	1c 82       	std	Y+4, r1	; 0x04
    1666:	1b 82       	std	Y+3, r1	; 0x03
    1668:	8b 83       	std	Y+3, r24	; 0x03
    if((NULL == btn) || (NULL == btn_state)){
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	21 f0       	breq	.+8      	; 0x167a <button_read_state+0x40>
    1672:	8f 81       	ldd	r24, Y+7	; 0x07
    1674:	98 85       	ldd	r25, Y+8	; 0x08
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	19 f4       	brne	.+6      	; 0x1680 <button_read_state+0x46>
        ret = E_NOK;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	2a c0       	rjmp	.+84     	; 0x16d4 <button_read_state+0x9a>
    }
    else{
    	gpio_pin_read(&loc_pin, &btn_Logic_Status);
    1680:	ce 01       	movw	r24, r28
    1682:	03 96       	adiw	r24, 0x03	; 3
    1684:	9e 01       	movw	r18, r28
    1686:	2e 5f       	subi	r18, 0xFE	; 254
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <gpio_pin_read>
        if(BUTTON_ACTIVE_HIGH == btn->button_connection){
    1690:	ed 81       	ldd	r30, Y+5	; 0x05
    1692:	fe 81       	ldd	r31, Y+6	; 0x06
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	88 23       	and	r24, r24
    1698:	61 f4       	brne	.+24     	; 0x16b2 <button_read_state+0x78>
            if(HIGH == btn_Logic_Status){
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	21 f4       	brne	.+8      	; 0x16a8 <button_read_state+0x6e>
                *btn_state = BUTTON_PRESSED;
    16a0:	ef 81       	ldd	r30, Y+7	; 0x07
    16a2:	f8 85       	ldd	r31, Y+8	; 0x08
    16a4:	10 82       	st	Z, r1
    16a6:	15 c0       	rjmp	.+42     	; 0x16d2 <button_read_state+0x98>
            }
            else{
                *btn_state = BUTTON_RELEASED;
    16a8:	ef 81       	ldd	r30, Y+7	; 0x07
    16aa:	f8 85       	ldd	r31, Y+8	; 0x08
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 83       	st	Z, r24
    16b0:	10 c0       	rjmp	.+32     	; 0x16d2 <button_read_state+0x98>
            }
        }
        else if(BUTTON_ACTIVE_LOW == btn->button_connection){
    16b2:	ed 81       	ldd	r30, Y+5	; 0x05
    16b4:	fe 81       	ldd	r31, Y+6	; 0x06
    16b6:	83 81       	ldd	r24, Z+3	; 0x03
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	59 f4       	brne	.+22     	; 0x16d2 <button_read_state+0x98>
            if(HIGH == btn_Logic_Status){
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	29 f4       	brne	.+10     	; 0x16cc <button_read_state+0x92>
                *btn_state = BUTTON_RELEASED;
    16c2:	ef 81       	ldd	r30, Y+7	; 0x07
    16c4:	f8 85       	ldd	r31, Y+8	; 0x08
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	80 83       	st	Z, r24
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <button_read_state+0x98>
            }
            else{
                *btn_state = BUTTON_PRESSED;
    16cc:	ef 81       	ldd	r30, Y+7	; 0x07
    16ce:	f8 85       	ldd	r31, Y+8	; 0x08
    16d0:	10 82       	st	Z, r1
            }
        }
        else { /* Nothing */ }
        ret = E_OK;
    16d2:	19 82       	std	Y+1, r1	; 0x01
    }
    return ret;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	28 96       	adiw	r28, 0x08	; 8
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <lcd_4bit_intialize>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_intialize(const chr_lcd_4bit_t *lcd){
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	c1 5a       	subi	r28, 0xA1	; 161
    16f6:	d0 40       	sbci	r29, 0x00	; 0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	fe 01       	movw	r30, r28
    1704:	ef 56       	subi	r30, 0x6F	; 111
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
	Std_ReturnType ret = E_OK;
    170c:	fe 01       	movw	r30, r28
    170e:	ea 5a       	subi	r30, 0xAA	; 170
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	10 82       	st	Z, r1
	uint8 Loc_counter = 0;
    1714:	fe 01       	movw	r30, r28
    1716:	eb 5a       	subi	r30, 0xAB	; 171
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	10 82       	st	Z, r1
	uint8 string1[] = {"Lcd inializing....."};
    171c:	ce 01       	movw	r24, r28
    171e:	89 5a       	subi	r24, 0xA9	; 169
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	cd 56       	subi	r28, 0x6D	; 109
    1724:	df 4f       	sbci	r29, 0xFF	; 255
    1726:	99 83       	std	Y+1, r25	; 0x01
    1728:	88 83       	st	Y, r24
    172a:	c3 59       	subi	r28, 0x93	; 147
    172c:	d0 40       	sbci	r29, 0x00	; 0
    172e:	80 e6       	ldi	r24, 0x60	; 96
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	cb 56       	subi	r28, 0x6B	; 107
    1734:	df 4f       	sbci	r29, 0xFF	; 255
    1736:	99 83       	std	Y+1, r25	; 0x01
    1738:	88 83       	st	Y, r24
    173a:	c5 59       	subi	r28, 0x95	; 149
    173c:	d0 40       	sbci	r29, 0x00	; 0
    173e:	94 e1       	ldi	r25, 0x14	; 20
    1740:	c9 56       	subi	r28, 0x69	; 105
    1742:	df 4f       	sbci	r29, 0xFF	; 255
    1744:	98 83       	st	Y, r25
    1746:	c7 59       	subi	r28, 0x97	; 151
    1748:	d0 40       	sbci	r29, 0x00	; 0
    174a:	cb 56       	subi	r28, 0x6B	; 107
    174c:	df 4f       	sbci	r29, 0xFF	; 255
    174e:	e8 81       	ld	r30, Y
    1750:	f9 81       	ldd	r31, Y+1	; 0x01
    1752:	c5 59       	subi	r28, 0x95	; 149
    1754:	d0 40       	sbci	r29, 0x00	; 0
    1756:	00 80       	ld	r0, Z
    1758:	cb 56       	subi	r28, 0x6B	; 107
    175a:	df 4f       	sbci	r29, 0xFF	; 255
    175c:	88 81       	ld	r24, Y
    175e:	99 81       	ldd	r25, Y+1	; 0x01
    1760:	c5 59       	subi	r28, 0x95	; 149
    1762:	d0 40       	sbci	r29, 0x00	; 0
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	cb 56       	subi	r28, 0x6B	; 107
    1768:	df 4f       	sbci	r29, 0xFF	; 255
    176a:	99 83       	std	Y+1, r25	; 0x01
    176c:	88 83       	st	Y, r24
    176e:	c5 59       	subi	r28, 0x95	; 149
    1770:	d0 40       	sbci	r29, 0x00	; 0
    1772:	cd 56       	subi	r28, 0x6D	; 109
    1774:	df 4f       	sbci	r29, 0xFF	; 255
    1776:	e8 81       	ld	r30, Y
    1778:	f9 81       	ldd	r31, Y+1	; 0x01
    177a:	c3 59       	subi	r28, 0x93	; 147
    177c:	d0 40       	sbci	r29, 0x00	; 0
    177e:	00 82       	st	Z, r0
    1780:	cd 56       	subi	r28, 0x6D	; 109
    1782:	df 4f       	sbci	r29, 0xFF	; 255
    1784:	88 81       	ld	r24, Y
    1786:	99 81       	ldd	r25, Y+1	; 0x01
    1788:	c3 59       	subi	r28, 0x93	; 147
    178a:	d0 40       	sbci	r29, 0x00	; 0
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	cd 56       	subi	r28, 0x6D	; 109
    1790:	df 4f       	sbci	r29, 0xFF	; 255
    1792:	99 83       	std	Y+1, r25	; 0x01
    1794:	88 83       	st	Y, r24
    1796:	c3 59       	subi	r28, 0x93	; 147
    1798:	d0 40       	sbci	r29, 0x00	; 0
    179a:	c9 56       	subi	r28, 0x69	; 105
    179c:	df 4f       	sbci	r29, 0xFF	; 255
    179e:	98 81       	ld	r25, Y
    17a0:	c7 59       	subi	r28, 0x97	; 151
    17a2:	d0 40       	sbci	r29, 0x00	; 0
    17a4:	91 50       	subi	r25, 0x01	; 1
    17a6:	c9 56       	subi	r28, 0x69	; 105
    17a8:	df 4f       	sbci	r29, 0xFF	; 255
    17aa:	98 83       	st	Y, r25
    17ac:	c7 59       	subi	r28, 0x97	; 151
    17ae:	d0 40       	sbci	r29, 0x00	; 0
    17b0:	c9 56       	subi	r28, 0x69	; 105
    17b2:	df 4f       	sbci	r29, 0xFF	; 255
    17b4:	e8 81       	ld	r30, Y
    17b6:	c7 59       	subi	r28, 0x97	; 151
    17b8:	d0 40       	sbci	r29, 0x00	; 0
    17ba:	ee 23       	and	r30, r30
    17bc:	31 f6       	brne	.-116    	; 0x174a <lcd_4bit_intialize+0x62>
	uint8 string2 []= {"Lcd inialized....."};
    17be:	ce 01       	movw	r24, r28
    17c0:	85 59       	subi	r24, 0x95	; 149
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	c8 56       	subi	r28, 0x68	; 104
    17c6:	df 4f       	sbci	r29, 0xFF	; 255
    17c8:	99 83       	std	Y+1, r25	; 0x01
    17ca:	88 83       	st	Y, r24
    17cc:	c8 59       	subi	r28, 0x98	; 152
    17ce:	d0 40       	sbci	r29, 0x00	; 0
    17d0:	84 e7       	ldi	r24, 0x74	; 116
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	c6 56       	subi	r28, 0x66	; 102
    17d6:	df 4f       	sbci	r29, 0xFF	; 255
    17d8:	99 83       	std	Y+1, r25	; 0x01
    17da:	88 83       	st	Y, r24
    17dc:	ca 59       	subi	r28, 0x9A	; 154
    17de:	d0 40       	sbci	r29, 0x00	; 0
    17e0:	93 e1       	ldi	r25, 0x13	; 19
    17e2:	c4 56       	subi	r28, 0x64	; 100
    17e4:	df 4f       	sbci	r29, 0xFF	; 255
    17e6:	98 83       	st	Y, r25
    17e8:	cc 59       	subi	r28, 0x9C	; 156
    17ea:	d0 40       	sbci	r29, 0x00	; 0
    17ec:	c6 56       	subi	r28, 0x66	; 102
    17ee:	df 4f       	sbci	r29, 0xFF	; 255
    17f0:	e8 81       	ld	r30, Y
    17f2:	f9 81       	ldd	r31, Y+1	; 0x01
    17f4:	ca 59       	subi	r28, 0x9A	; 154
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	00 80       	ld	r0, Z
    17fa:	c6 56       	subi	r28, 0x66	; 102
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	88 81       	ld	r24, Y
    1800:	99 81       	ldd	r25, Y+1	; 0x01
    1802:	ca 59       	subi	r28, 0x9A	; 154
    1804:	d0 40       	sbci	r29, 0x00	; 0
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	c6 56       	subi	r28, 0x66	; 102
    180a:	df 4f       	sbci	r29, 0xFF	; 255
    180c:	99 83       	std	Y+1, r25	; 0x01
    180e:	88 83       	st	Y, r24
    1810:	ca 59       	subi	r28, 0x9A	; 154
    1812:	d0 40       	sbci	r29, 0x00	; 0
    1814:	c8 56       	subi	r28, 0x68	; 104
    1816:	df 4f       	sbci	r29, 0xFF	; 255
    1818:	e8 81       	ld	r30, Y
    181a:	f9 81       	ldd	r31, Y+1	; 0x01
    181c:	c8 59       	subi	r28, 0x98	; 152
    181e:	d0 40       	sbci	r29, 0x00	; 0
    1820:	00 82       	st	Z, r0
    1822:	c8 56       	subi	r28, 0x68	; 104
    1824:	df 4f       	sbci	r29, 0xFF	; 255
    1826:	88 81       	ld	r24, Y
    1828:	99 81       	ldd	r25, Y+1	; 0x01
    182a:	c8 59       	subi	r28, 0x98	; 152
    182c:	d0 40       	sbci	r29, 0x00	; 0
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	c8 56       	subi	r28, 0x68	; 104
    1832:	df 4f       	sbci	r29, 0xFF	; 255
    1834:	99 83       	std	Y+1, r25	; 0x01
    1836:	88 83       	st	Y, r24
    1838:	c8 59       	subi	r28, 0x98	; 152
    183a:	d0 40       	sbci	r29, 0x00	; 0
    183c:	c4 56       	subi	r28, 0x64	; 100
    183e:	df 4f       	sbci	r29, 0xFF	; 255
    1840:	98 81       	ld	r25, Y
    1842:	cc 59       	subi	r28, 0x9C	; 156
    1844:	d0 40       	sbci	r29, 0x00	; 0
    1846:	91 50       	subi	r25, 0x01	; 1
    1848:	c4 56       	subi	r28, 0x64	; 100
    184a:	df 4f       	sbci	r29, 0xFF	; 255
    184c:	98 83       	st	Y, r25
    184e:	cc 59       	subi	r28, 0x9C	; 156
    1850:	d0 40       	sbci	r29, 0x00	; 0
    1852:	c4 56       	subi	r28, 0x64	; 100
    1854:	df 4f       	sbci	r29, 0xFF	; 255
    1856:	e8 81       	ld	r30, Y
    1858:	cc 59       	subi	r28, 0x9C	; 156
    185a:	d0 40       	sbci	r29, 0x00	; 0
    185c:	ee 23       	and	r30, r30
    185e:	31 f6       	brne	.-116    	; 0x17ec <lcd_4bit_intialize+0x104>
	uint8 string3 []= {"Lcd Is Ready......"};
    1860:	ce 01       	movw	r24, r28
    1862:	82 58       	subi	r24, 0x82	; 130
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	c3 56       	subi	r28, 0x63	; 99
    1868:	df 4f       	sbci	r29, 0xFF	; 255
    186a:	99 83       	std	Y+1, r25	; 0x01
    186c:	88 83       	st	Y, r24
    186e:	cd 59       	subi	r28, 0x9D	; 157
    1870:	d0 40       	sbci	r29, 0x00	; 0
    1872:	87 e8       	ldi	r24, 0x87	; 135
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	c1 56       	subi	r28, 0x61	; 97
    1878:	df 4f       	sbci	r29, 0xFF	; 255
    187a:	99 83       	std	Y+1, r25	; 0x01
    187c:	88 83       	st	Y, r24
    187e:	cf 59       	subi	r28, 0x9F	; 159
    1880:	d0 40       	sbci	r29, 0x00	; 0
    1882:	93 e1       	ldi	r25, 0x13	; 19
    1884:	cf 55       	subi	r28, 0x5F	; 95
    1886:	df 4f       	sbci	r29, 0xFF	; 255
    1888:	98 83       	st	Y, r25
    188a:	c1 5a       	subi	r28, 0xA1	; 161
    188c:	d0 40       	sbci	r29, 0x00	; 0
    188e:	c1 56       	subi	r28, 0x61	; 97
    1890:	df 4f       	sbci	r29, 0xFF	; 255
    1892:	e8 81       	ld	r30, Y
    1894:	f9 81       	ldd	r31, Y+1	; 0x01
    1896:	cf 59       	subi	r28, 0x9F	; 159
    1898:	d0 40       	sbci	r29, 0x00	; 0
    189a:	00 80       	ld	r0, Z
    189c:	c1 56       	subi	r28, 0x61	; 97
    189e:	df 4f       	sbci	r29, 0xFF	; 255
    18a0:	88 81       	ld	r24, Y
    18a2:	99 81       	ldd	r25, Y+1	; 0x01
    18a4:	cf 59       	subi	r28, 0x9F	; 159
    18a6:	d0 40       	sbci	r29, 0x00	; 0
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	c1 56       	subi	r28, 0x61	; 97
    18ac:	df 4f       	sbci	r29, 0xFF	; 255
    18ae:	99 83       	std	Y+1, r25	; 0x01
    18b0:	88 83       	st	Y, r24
    18b2:	cf 59       	subi	r28, 0x9F	; 159
    18b4:	d0 40       	sbci	r29, 0x00	; 0
    18b6:	c3 56       	subi	r28, 0x63	; 99
    18b8:	df 4f       	sbci	r29, 0xFF	; 255
    18ba:	e8 81       	ld	r30, Y
    18bc:	f9 81       	ldd	r31, Y+1	; 0x01
    18be:	cd 59       	subi	r28, 0x9D	; 157
    18c0:	d0 40       	sbci	r29, 0x00	; 0
    18c2:	00 82       	st	Z, r0
    18c4:	c3 56       	subi	r28, 0x63	; 99
    18c6:	df 4f       	sbci	r29, 0xFF	; 255
    18c8:	88 81       	ld	r24, Y
    18ca:	99 81       	ldd	r25, Y+1	; 0x01
    18cc:	cd 59       	subi	r28, 0x9D	; 157
    18ce:	d0 40       	sbci	r29, 0x00	; 0
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	c3 56       	subi	r28, 0x63	; 99
    18d4:	df 4f       	sbci	r29, 0xFF	; 255
    18d6:	99 83       	std	Y+1, r25	; 0x01
    18d8:	88 83       	st	Y, r24
    18da:	cd 59       	subi	r28, 0x9D	; 157
    18dc:	d0 40       	sbci	r29, 0x00	; 0
    18de:	cf 55       	subi	r28, 0x5F	; 95
    18e0:	df 4f       	sbci	r29, 0xFF	; 255
    18e2:	98 81       	ld	r25, Y
    18e4:	c1 5a       	subi	r28, 0xA1	; 161
    18e6:	d0 40       	sbci	r29, 0x00	; 0
    18e8:	91 50       	subi	r25, 0x01	; 1
    18ea:	cf 55       	subi	r28, 0x5F	; 95
    18ec:	df 4f       	sbci	r29, 0xFF	; 255
    18ee:	98 83       	st	Y, r25
    18f0:	c1 5a       	subi	r28, 0xA1	; 161
    18f2:	d0 40       	sbci	r29, 0x00	; 0
    18f4:	cf 55       	subi	r28, 0x5F	; 95
    18f6:	df 4f       	sbci	r29, 0xFF	; 255
    18f8:	e8 81       	ld	r30, Y
    18fa:	c1 5a       	subi	r28, 0xA1	; 161
    18fc:	d0 40       	sbci	r29, 0x00	; 0
    18fe:	ee 23       	and	r30, r30
    1900:	31 f6       	brne	.-116    	; 0x188e <lcd_4bit_intialize+0x1a6>
	if(NULL == lcd){
    1902:	fe 01       	movw	r30, r28
    1904:	ef 56       	subi	r30, 0x6F	; 111
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	31 f4       	brne	.+12     	; 0x191c <lcd_4bit_intialize+0x234>
		ret = E_NOK;
    1910:	fe 01       	movw	r30, r28
    1912:	ea 5a       	subi	r30, 0xAA	; 170
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	80 83       	st	Z, r24
    191a:	00 c4       	rjmp	.+2048   	; 0x211c <lcd_4bit_intialize+0xa34>
	}
	else{
		ret = gpio_pin_initalize(&(lcd->lcd_rs));
    191c:	fe 01       	movw	r30, r28
    191e:	ef 56       	subi	r30, 0x6F	; 111
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    192a:	fe 01       	movw	r30, r28
    192c:	ea 5a       	subi	r30, 0xAA	; 170
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 83       	st	Z, r24
		ret = gpio_pin_initalize(&(lcd->lcd_en));
    1932:	fe 01       	movw	r30, r28
    1934:	ef 56       	subi	r30, 0x6F	; 111
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	02 96       	adiw	r24, 0x02	; 2
    193e:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    1942:	fe 01       	movw	r30, r28
    1944:	ea 5a       	subi	r30, 0xAA	; 170
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 83       	st	Z, r24
		for(Loc_counter = 0; Loc_counter < 4; ++Loc_counter)
    194a:	fe 01       	movw	r30, r28
    194c:	eb 5a       	subi	r30, 0xAB	; 171
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	10 82       	st	Z, r1
    1952:	21 c0       	rjmp	.+66     	; 0x1996 <lcd_4bit_intialize+0x2ae>
		{
			ret = gpio_pin_initalize(&(lcd->lcd_data[Loc_counter]));
    1954:	fe 01       	movw	r30, r28
    1956:	ef 56       	subi	r30, 0x6F	; 111
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	9c 01       	movw	r18, r24
    1960:	2c 5f       	subi	r18, 0xFC	; 252
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	fe 01       	movw	r30, r28
    1966:	eb 5a       	subi	r30, 0xAB	; 171
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	82 0f       	add	r24, r18
    1976:	93 1f       	adc	r25, r19
    1978:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    197c:	fe 01       	movw	r30, r28
    197e:	ea 5a       	subi	r30, 0xAA	; 170
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 83       	st	Z, r24
		ret = E_NOK;
	}
	else{
		ret = gpio_pin_initalize(&(lcd->lcd_rs));
		ret = gpio_pin_initalize(&(lcd->lcd_en));
		for(Loc_counter = 0; Loc_counter < 4; ++Loc_counter)
    1984:	de 01       	movw	r26, r28
    1986:	ab 5a       	subi	r26, 0xAB	; 171
    1988:	bf 4f       	sbci	r27, 0xFF	; 255
    198a:	fe 01       	movw	r30, r28
    198c:	eb 5a       	subi	r30, 0xAB	; 171
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	8c 93       	st	X, r24
    1996:	fe 01       	movw	r30, r28
    1998:	eb 5a       	subi	r30, 0xAB	; 171
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	c8 f2       	brcs	.-78     	; 0x1954 <lcd_4bit_intialize+0x26c>
    19a2:	fe 01       	movw	r30, r28
    19a4:	ef 5a       	subi	r30, 0xAF	; 175
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	a0 ea       	ldi	r26, 0xA0	; 160
    19ae:	b1 e4       	ldi	r27, 0x41	; 65
    19b0:	80 83       	st	Z, r24
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	a2 83       	std	Z+2, r26	; 0x02
    19b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b8:	8e 01       	movw	r16, r28
    19ba:	03 5b       	subi	r16, 0xB3	; 179
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	fe 01       	movw	r30, r28
    19c0:	ef 5a       	subi	r30, 0xAF	; 175
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a e7       	ldi	r20, 0x7A	; 122
    19d2:	55 e4       	ldi	r21, 0x45	; 69
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	f8 01       	movw	r30, r16
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e6:	fe 01       	movw	r30, r28
    19e8:	e3 5b       	subi	r30, 0xB3	; 179
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	44 f4       	brge	.+16     	; 0x1a14 <lcd_4bit_intialize+0x32c>
		__ticks = 1;
    1a04:	fe 01       	movw	r30, r28
    1a06:	e5 5b       	subi	r30, 0xB5	; 181
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	64 c0       	rjmp	.+200    	; 0x1adc <lcd_4bit_intialize+0x3f4>
	else if (__tmp > 65535)
    1a14:	fe 01       	movw	r30, r28
    1a16:	e3 5b       	subi	r30, 0xB3	; 179
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	0c f0       	brlt	.+2      	; 0x1a34 <lcd_4bit_intialize+0x34c>
    1a32:	43 c0       	rjmp	.+134    	; 0x1aba <lcd_4bit_intialize+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a34:	fe 01       	movw	r30, r28
    1a36:	ef 5a       	subi	r30, 0xAF	; 175
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8e 01       	movw	r16, r28
    1a54:	05 5b       	subi	r16, 0xB5	; 181
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	f8 01       	movw	r30, r16
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	1f c0       	rjmp	.+62     	; 0x1aaa <lcd_4bit_intialize+0x3c2>
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e7 5b       	subi	r30, 0xB7	; 183
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 e9       	ldi	r24, 0x90	; 144
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e7 5b       	subi	r30, 0xB7	; 183
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <lcd_4bit_intialize+0x39c>
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e7 5b       	subi	r30, 0xB7	; 183
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	de 01       	movw	r26, r28
    1a94:	a5 5b       	subi	r26, 0xB5	; 181
    1a96:	bf 4f       	sbci	r27, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e5 5b       	subi	r30, 0xB5	; 181
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	11 96       	adiw	r26, 0x01	; 1
    1aa6:	9c 93       	st	X, r25
    1aa8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e5 5b       	subi	r30, 0xB5	; 181
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	d1 f6       	brne	.-76     	; 0x1a6c <lcd_4bit_intialize+0x384>
    1ab8:	27 c0       	rjmp	.+78     	; 0x1b08 <lcd_4bit_intialize+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aba:	8e 01       	movw	r16, r28
    1abc:	05 5b       	subi	r16, 0xB5	; 181
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e3 5b       	subi	r30, 0xB3	; 179
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
    1adc:	de 01       	movw	r26, r28
    1ade:	a9 5b       	subi	r26, 0xB9	; 185
    1ae0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e5 5b       	subi	r30, 0xB5	; 181
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	8d 93       	st	X+, r24
    1aee:	9c 93       	st	X, r25
    1af0:	fe 01       	movw	r30, r28
    1af2:	e9 5b       	subi	r30, 0xB9	; 185
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <lcd_4bit_intialize+0x412>
    1afe:	fe 01       	movw	r30, r28
    1b00:	e9 5b       	subi	r30, 0xB9	; 185
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
		{
			ret = gpio_pin_initalize(&(lcd->lcd_data[Loc_counter]));
		}

		Delay_ms(20);
		ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ef 56       	subi	r30, 0x6F	; 111
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	68 e3       	ldi	r22, 0x38	; 56
    1b14:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ea 5a       	subi	r30, 0xAA	; 170
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 83       	st	Z, r24
    1b20:	fe 01       	movw	r30, r28
    1b22:	ed 5b       	subi	r30, 0xBD	; 189
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 ea       	ldi	r26, 0xA0	; 160
    1b2c:	b0 e4       	ldi	r27, 0x40	; 64
    1b2e:	80 83       	st	Z, r24
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	a2 83       	std	Z+2, r26	; 0x02
    1b34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	8e 01       	movw	r16, r28
    1b38:	01 5c       	subi	r16, 0xC1	; 193
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ed 5b       	subi	r30, 0xBD	; 189
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	60 81       	ld	r22, Z
    1b44:	71 81       	ldd	r23, Z+1	; 0x01
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4a e7       	ldi	r20, 0x7A	; 122
    1b50:	55 e4       	ldi	r21, 0x45	; 69
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	80 83       	st	Z, r24
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	a2 83       	std	Z+2, r26	; 0x02
    1b62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b64:	fe 01       	movw	r30, r28
    1b66:	ff 96       	adiw	r30, 0x3f	; 63
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <lcd_4bit_intialize+0x4a2>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9e af       	std	Y+62, r25	; 0x3e
    1b86:	8d af       	std	Y+61, r24	; 0x3d
    1b88:	46 c0       	rjmp	.+140    	; 0x1c16 <lcd_4bit_intialize+0x52e>
	else if (__tmp > 65535)
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ff 96       	adiw	r30, 0x3f	; 63
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	64 f5       	brge	.+88     	; 0x1bfe <lcd_4bit_intialize+0x516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ed 5b       	subi	r30, 0xBD	; 189
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9e af       	std	Y+62, r25	; 0x3e
    1bd2:	8d af       	std	Y+61, r24	; 0x3d
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <lcd_4bit_intialize+0x50c>
    1bd6:	80 e9       	ldi	r24, 0x90	; 144
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	9c af       	std	Y+60, r25	; 0x3c
    1bdc:	8b af       	std	Y+59, r24	; 0x3b
    1bde:	8b ad       	ldd	r24, Y+59	; 0x3b
    1be0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <lcd_4bit_intialize+0x4fa>
    1be6:	9c af       	std	Y+60, r25	; 0x3c
    1be8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9e af       	std	Y+62, r25	; 0x3e
    1bf2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <lcd_4bit_intialize+0x4ee>
    1bfc:	16 c0       	rjmp	.+44     	; 0x1c2a <lcd_4bit_intialize+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ff 96       	adiw	r30, 0x3f	; 63
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e af       	std	Y+62, r25	; 0x3e
    1c14:	8d af       	std	Y+61, r24	; 0x3d
    1c16:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c18:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c1a:	9a af       	std	Y+58, r25	; 0x3a
    1c1c:	89 af       	std	Y+57, r24	; 0x39
    1c1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <lcd_4bit_intialize+0x53a>
    1c26:	9a af       	std	Y+58, r25	; 0x3a
    1c28:	89 af       	std	Y+57, r24	; 0x39
		Delay_ms(5);
		ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	ef 56       	subi	r30, 0x6F	; 111
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	68 e3       	ldi	r22, 0x38	; 56
    1c36:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ea 5a       	subi	r30, 0xAA	; 170
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 83       	st	Z, r24
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a6 e1       	ldi	r26, 0x16	; 22
    1c48:	b3 e4       	ldi	r27, 0x43	; 67
    1c4a:	8d ab       	std	Y+53, r24	; 0x35
    1c4c:	9e ab       	std	Y+54, r25	; 0x36
    1c4e:	af ab       	std	Y+55, r26	; 0x37
    1c50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	6d a9       	ldd	r22, Y+53	; 0x35
    1c54:	7e a9       	ldd	r23, Y+54	; 0x36
    1c56:	8f a9       	ldd	r24, Y+55	; 0x37
    1c58:	98 ad       	ldd	r25, Y+56	; 0x38
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	55 e4       	ldi	r21, 0x45	; 69
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	89 ab       	std	Y+49, r24	; 0x31
    1c6c:	9a ab       	std	Y+50, r25	; 0x32
    1c6e:	ab ab       	std	Y+51, r26	; 0x33
    1c70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c72:	69 a9       	ldd	r22, Y+49	; 0x31
    1c74:	7a a9       	ldd	r23, Y+50	; 0x32
    1c76:	8b a9       	ldd	r24, Y+51	; 0x33
    1c78:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <lcd_4bit_intialize+0x5ac>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	98 ab       	std	Y+48, r25	; 0x30
    1c90:	8f a7       	std	Y+47, r24	; 0x2f
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <lcd_4bit_intialize+0x62a>
	else if (__tmp > 65535)
    1c94:	69 a9       	ldd	r22, Y+49	; 0x31
    1c96:	7a a9       	ldd	r23, Y+50	; 0x32
    1c98:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	4c f5       	brge	.+82     	; 0x1cfe <lcd_4bit_intialize+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	6d a9       	ldd	r22, Y+53	; 0x35
    1cae:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e2       	ldi	r20, 0x20	; 32
    1cba:	51 e4       	ldi	r21, 0x41	; 65
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	98 ab       	std	Y+48, r25	; 0x30
    1cd2:	8f a7       	std	Y+47, r24	; 0x2f
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <lcd_4bit_intialize+0x60c>
    1cd6:	80 e9       	ldi	r24, 0x90	; 144
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	9e a7       	std	Y+46, r25	; 0x2e
    1cdc:	8d a7       	std	Y+45, r24	; 0x2d
    1cde:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <lcd_4bit_intialize+0x5fa>
    1ce6:	9e a7       	std	Y+46, r25	; 0x2e
    1ce8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cec:	98 a9       	ldd	r25, Y+48	; 0x30
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	98 ab       	std	Y+48, r25	; 0x30
    1cf2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	69 f7       	brne	.-38     	; 0x1cd6 <lcd_4bit_intialize+0x5ee>
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <lcd_4bit_intialize+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1d00:	7a a9       	ldd	r23, Y+50	; 0x32
    1d02:	8b a9       	ldd	r24, Y+51	; 0x33
    1d04:	9c a9       	ldd	r25, Y+52	; 0x34
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	98 ab       	std	Y+48, r25	; 0x30
    1d10:	8f a7       	std	Y+47, r24	; 0x2f
    1d12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d14:	98 a9       	ldd	r25, Y+48	; 0x30
    1d16:	9c a7       	std	Y+44, r25	; 0x2c
    1d18:	8b a7       	std	Y+43, r24	; 0x2b
    1d1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <lcd_4bit_intialize+0x636>
    1d22:	9c a7       	std	Y+44, r25	; 0x2c
    1d24:	8b a7       	std	Y+43, r24	; 0x2b
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    1d26:	fe 01       	movw	r30, r28
    1d28:	ef 56       	subi	r30, 0x6F	; 111
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	68 e3       	ldi	r22, 0x38	; 56
    1d32:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1d36:	fe 01       	movw	r30, r28
    1d38:	ea 5a       	subi	r30, 0xAA	; 170
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 83       	st	Z, r24

		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ef 56       	subi	r30, 0x6F	; 111
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	61 e0       	ldi	r22, 0x01	; 1
    1d4a:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ea 5a       	subi	r30, 0xAA	; 170
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_RETURN_HOME);
    1d56:	fe 01       	movw	r30, r28
    1d58:	ef 56       	subi	r30, 0x6F	; 111
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1d66:	fe 01       	movw	r30, r28
    1d68:	ea 5a       	subi	r30, 0xAA	; 170
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ef 56       	subi	r30, 0x6F	; 111
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	66 e0       	ldi	r22, 0x06	; 6
    1d7a:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ea 5a       	subi	r30, 0xAA	; 170
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    1d86:	fe 01       	movw	r30, r28
    1d88:	ef 56       	subi	r30, 0x6F	; 111
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	6c e0       	ldi	r22, 0x0C	; 12
    1d92:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1d96:	fe 01       	movw	r30, r28
    1d98:	ea 5a       	subi	r30, 0xAA	; 170
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ef 56       	subi	r30, 0x6F	; 111
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	68 e2       	ldi	r22, 0x28	; 40
    1daa:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1dae:	fe 01       	movw	r30, r28
    1db0:	ea 5a       	subi	r30, 0xAA	; 170
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, 0x80);
    1db6:	fe 01       	movw	r30, r28
    1db8:	ef 56       	subi	r30, 0x6F	; 111
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	60 e8       	ldi	r22, 0x80	; 128
    1dc2:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ea 5a       	subi	r30, 0xAA	; 170
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 83       	st	Z, r24

		ret = lcd_4bit_send_string(lcd, &string1);
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ef 56       	subi	r30, 0x6F	; 111
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	9e 01       	movw	r18, r28
    1dda:	29 5a       	subi	r18, 0xA9	; 169
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	b9 01       	movw	r22, r18
    1de0:	0e 94 3b 11 	call	0x2276	; 0x2276 <lcd_4bit_send_string>
    1de4:	fe 01       	movw	r30, r28
    1de6:	ea 5a       	subi	r30, 0xAA	; 170
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 83       	st	Z, r24
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a6 e1       	ldi	r26, 0x16	; 22
    1df2:	b3 e4       	ldi	r27, 0x43	; 67
    1df4:	8f a3       	std	Y+39, r24	; 0x27
    1df6:	98 a7       	std	Y+40, r25	; 0x28
    1df8:	a9 a7       	std	Y+41, r26	; 0x29
    1dfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfe:	78 a5       	ldd	r23, Y+40	; 0x28
    1e00:	89 a5       	ldd	r24, Y+41	; 0x29
    1e02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a e7       	ldi	r20, 0x7A	; 122
    1e0a:	55 e4       	ldi	r21, 0x45	; 69
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	8b a3       	std	Y+35, r24	; 0x23
    1e16:	9c a3       	std	Y+36, r25	; 0x24
    1e18:	ad a3       	std	Y+37, r26	; 0x25
    1e1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e20:	8d a1       	ldd	r24, Y+37	; 0x25
    1e22:	9e a1       	ldd	r25, Y+38	; 0x26
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <lcd_4bit_intialize+0x756>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9a a3       	std	Y+34, r25	; 0x22
    1e3a:	89 a3       	std	Y+33, r24	; 0x21
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <lcd_4bit_intialize+0x7d4>
	else if (__tmp > 65535)
    1e3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e40:	7c a1       	ldd	r23, Y+36	; 0x24
    1e42:	8d a1       	ldd	r24, Y+37	; 0x25
    1e44:	9e a1       	ldd	r25, Y+38	; 0x26
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <lcd_4bit_intialize+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6f a1       	ldd	r22, Y+39	; 0x27
    1e58:	78 a5       	ldd	r23, Y+40	; 0x28
    1e5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9a a3       	std	Y+34, r25	; 0x22
    1e7c:	89 a3       	std	Y+33, r24	; 0x21
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <lcd_4bit_intialize+0x7b6>
    1e80:	80 e9       	ldi	r24, 0x90	; 144
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	98 a3       	std	Y+32, r25	; 0x20
    1e86:	8f 8f       	std	Y+31, r24	; 0x1f
    1e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <lcd_4bit_intialize+0x7a4>
    1e90:	98 a3       	std	Y+32, r25	; 0x20
    1e92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	89 a1       	ldd	r24, Y+33	; 0x21
    1e96:	9a a1       	ldd	r25, Y+34	; 0x22
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	9a a3       	std	Y+34, r25	; 0x22
    1e9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <lcd_4bit_intialize+0x798>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <lcd_4bit_intialize+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1eac:	8d a1       	ldd	r24, Y+37	; 0x25
    1eae:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9a a3       	std	Y+34, r25	; 0x22
    1eba:	89 a3       	std	Y+33, r24	; 0x21
    1ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <lcd_4bit_intialize+0x7e0>
    1ecc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ece:	8d 8f       	std	Y+29, r24	; 0x1d
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ef 56       	subi	r30, 0x6F	; 111
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	91 81       	ldd	r25, Z+1	; 0x01
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	ea 5a       	subi	r30, 0xAA	; 170
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 83       	st	Z, r24

		ret = lcd_4bit_send_string(lcd, &string2);
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ef 56       	subi	r30, 0x6F	; 111
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	9e 01       	movw	r18, r28
    1ef4:	25 59       	subi	r18, 0x95	; 149
    1ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef8:	b9 01       	movw	r22, r18
    1efa:	0e 94 3b 11 	call	0x2276	; 0x2276 <lcd_4bit_send_string>
    1efe:	fe 01       	movw	r30, r28
    1f00:	ea 5a       	subi	r30, 0xAA	; 170
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 83       	st	Z, r24
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a6 e1       	ldi	r26, 0x16	; 22
    1f0c:	b3 e4       	ldi	r27, 0x43	; 67
    1f0e:	89 8f       	std	Y+25, r24	; 0x19
    1f10:	9a 8f       	std	Y+26, r25	; 0x1a
    1f12:	ab 8f       	std	Y+27, r26	; 0x1b
    1f14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	69 8d       	ldd	r22, Y+25	; 0x19
    1f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	55 e4       	ldi	r21, 0x45	; 69
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8d 8b       	std	Y+21, r24	; 0x15
    1f30:	9e 8b       	std	Y+22, r25	; 0x16
    1f32:	af 8b       	std	Y+23, r26	; 0x17
    1f34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f36:	6d 89       	ldd	r22, Y+21	; 0x15
    1f38:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <lcd_4bit_intialize+0x870>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9c 8b       	std	Y+20, r25	; 0x14
    1f54:	8b 8b       	std	Y+19, r24	; 0x13
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <lcd_4bit_intialize+0x8ee>
	else if (__tmp > 65535)
    1f58:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <lcd_4bit_intialize+0x8da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	69 8d       	ldd	r22, Y+25	; 0x19
    1f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <lcd_4bit_intialize+0x8d0>
    1f9a:	80 e9       	ldi	r24, 0x90	; 144
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	9a 8b       	std	Y+18, r25	; 0x12
    1fa0:	89 8b       	std	Y+17, r24	; 0x11
    1fa2:	89 89       	ldd	r24, Y+17	; 0x11
    1fa4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <lcd_4bit_intialize+0x8be>
    1faa:	9a 8b       	std	Y+18, r25	; 0x12
    1fac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	9c 8b       	std	Y+20, r25	; 0x14
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <lcd_4bit_intialize+0x8b2>
    1fc0:	14 c0       	rjmp	.+40     	; 0x1fea <lcd_4bit_intialize+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fda:	98 8b       	std	Y+16, r25	; 0x10
    1fdc:	8f 87       	std	Y+15, r24	; 0x0f
    1fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe0:	98 89       	ldd	r25, Y+16	; 0x10
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <lcd_4bit_intialize+0x8fa>
    1fe6:	98 8b       	std	Y+16, r25	; 0x10
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    1fea:	fe 01       	movw	r30, r28
    1fec:	ef 56       	subi	r30, 0x6F	; 111
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ea 5a       	subi	r30, 0xAA	; 170
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 83       	st	Z, r24

		ret = lcd_4bit_send_string(lcd, &string3);
    2002:	fe 01       	movw	r30, r28
    2004:	ef 56       	subi	r30, 0x6F	; 111
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	9e 01       	movw	r18, r28
    200e:	22 58       	subi	r18, 0x82	; 130
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	b9 01       	movw	r22, r18
    2014:	0e 94 3b 11 	call	0x2276	; 0x2276 <lcd_4bit_send_string>
    2018:	fe 01       	movw	r30, r28
    201a:	ea 5a       	subi	r30, 0xAA	; 170
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 83       	st	Z, r24
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a6 e1       	ldi	r26, 0x16	; 22
    2026:	b3 e4       	ldi	r27, 0x43	; 67
    2028:	8b 87       	std	Y+11, r24	; 0x0b
    202a:	9c 87       	std	Y+12, r25	; 0x0c
    202c:	ad 87       	std	Y+13, r26	; 0x0d
    202e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6b 85       	ldd	r22, Y+11	; 0x0b
    2032:	7c 85       	ldd	r23, Y+12	; 0x0c
    2034:	8d 85       	ldd	r24, Y+13	; 0x0d
    2036:	9e 85       	ldd	r25, Y+14	; 0x0e
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a e7       	ldi	r20, 0x7A	; 122
    203e:	55 e4       	ldi	r21, 0x45	; 69
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8f 83       	std	Y+7, r24	; 0x07
    204a:	98 87       	std	Y+8, r25	; 0x08
    204c:	a9 87       	std	Y+9, r26	; 0x09
    204e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <lcd_4bit_intialize+0x98a>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <lcd_4bit_intialize+0xa08>
	else if (__tmp > 65535)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <lcd_4bit_intialize+0x9f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6b 85       	ldd	r22, Y+11	; 0x0b
    208c:	7c 85       	ldd	r23, Y+12	; 0x0c
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <lcd_4bit_intialize+0x9ea>
    20b4:	80 e9       	ldi	r24, 0x90	; 144
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <lcd_4bit_intialize+0x9d8>
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <lcd_4bit_intialize+0x9cc>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <lcd_4bit_intialize+0xa1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <lcd_4bit_intialize+0xa14>
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    2104:	fe 01       	movw	r30, r28
    2106:	ef 56       	subi	r30, 0x6F	; 111
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    2114:	fe 01       	movw	r30, r28
    2116:	ea 5a       	subi	r30, 0xAA	; 170
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 83       	st	Z, r24
	}
	return ret;
    211c:	fe 01       	movw	r30, r28
    211e:	ea 5a       	subi	r30, 0xAA	; 170
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
}
    2124:	cf 55       	subi	r28, 0x5F	; 95
    2126:	df 4f       	sbci	r29, 0xFF	; 255
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	08 95       	ret

0000213c <lcd_4bit_send_command>:
 * @param command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_command(const chr_lcd_4bit_t *lcd, uint8 command){
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <lcd_4bit_send_command+0x6>
    2142:	00 d0       	rcall	.+0      	; 0x2144 <lcd_4bit_send_command+0x8>
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9b 83       	std	Y+3, r25	; 0x03
    214a:	8a 83       	std	Y+2, r24	; 0x02
    214c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    214e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	19 f4       	brne	.+6      	; 0x215e <lcd_4bit_send_command+0x22>
		ret = E_NOK;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	20 c0       	rjmp	.+64     	; 0x219e <lcd_4bit_send_command+0x62>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), LOW);
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2168:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Command through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, command >> 4);
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	28 2f       	mov	r18, r24
    216e:	22 95       	swap	r18
    2170:	2f 70       	andi	r18, 0x0F	; 15
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	62 2f       	mov	r22, r18
    2178:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <lcd_send_4bits>
    217c:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	0e 94 88 16 	call	0x2d10	; 0x2d10 <lcd_4bit_send_enable_signal>
    2186:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Command through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, command);
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	9b 81       	ldd	r25, Y+3	; 0x03
    218c:	6c 81       	ldd	r22, Y+4	; 0x04
    218e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <lcd_send_4bits>
    2192:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	9b 81       	ldd	r25, Y+3	; 0x03
    2198:	0e 94 88 16 	call	0x2d10	; 0x2d10 <lcd_4bit_send_enable_signal>
    219c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    219e:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <lcd_4bit_send_char_data>:
 * @param data The data that we need to send to the LCD
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd, uint8 data){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <lcd_4bit_send_char_data+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <lcd_4bit_send_char_data+0x8>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9b 83       	std	Y+3, r25	; 0x03
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    21c0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	19 f4       	brne	.+6      	; 0x21d0 <lcd_4bit_send_char_data+0x22>
		ret = E_NOK;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	20 c0       	rjmp	.+64     	; 0x2210 <lcd_4bit_send_char_data+0x62>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), HIGH);
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    21da:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Data through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, data >> 4);
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	28 2f       	mov	r18, r24
    21e0:	22 95       	swap	r18
    21e2:	2f 70       	andi	r18, 0x0F	; 15
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	9b 81       	ldd	r25, Y+3	; 0x03
    21e8:	62 2f       	mov	r22, r18
    21ea:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <lcd_send_4bits>
    21ee:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	0e 94 88 16 	call	0x2d10	; 0x2d10 <lcd_4bit_send_enable_signal>
    21f8:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Data through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, data);
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	6c 81       	ldd	r22, Y+4	; 0x04
    2200:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <lcd_send_4bits>
    2204:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	9b 81       	ldd	r25, Y+3	; 0x03
    220a:	0e 94 88 16 	call	0x2d10	; 0x2d10 <lcd_4bit_send_enable_signal>
    220e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2210:	89 81       	ldd	r24, Y+1	; 0x01
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <lcd_4bit_send_char_data_pos>:
 * @param data
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_char_data_pos(const chr_lcd_4bit_t *lcd,uint8 row, uint8 column, uint8 data){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <lcd_4bit_send_char_data_pos+0x6>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <lcd_4bit_send_char_data_pos+0x8>
    2228:	00 d0       	rcall	.+0      	; 0x222a <lcd_4bit_send_char_data_pos+0xa>
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	9b 83       	std	Y+3, r25	; 0x03
    2230:	8a 83       	std	Y+2, r24	; 0x02
    2232:	6c 83       	std	Y+4, r22	; 0x04
    2234:	4d 83       	std	Y+5, r20	; 0x05
    2236:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    2238:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	19 f4       	brne	.+6      	; 0x2248 <lcd_4bit_send_char_data_pos+0x28>
		ret = E_NOK;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	0d c0       	rjmp	.+26     	; 0x2262 <lcd_4bit_send_char_data_pos+0x42>
	}
	else{
		ret = lcd_4bit_set_cursor(lcd, row, column);
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	6c 81       	ldd	r22, Y+4	; 0x04
    224e:	4d 81       	ldd	r20, Y+5	; 0x05
    2250:	0e 94 19 18 	call	0x3032	; 0x3032 <lcd_4bit_set_cursor>
    2254:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_char_data(lcd, data);
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	9b 81       	ldd	r25, Y+3	; 0x03
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_4bit_send_char_data>
    2260:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	26 96       	adiw	r28, 0x06	; 6
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <lcd_4bit_send_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_string(const chr_lcd_4bit_t *lcd, uint8 *str){
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <lcd_4bit_send_string+0x6>
    227c:	00 d0       	rcall	.+0      	; 0x227e <lcd_4bit_send_string+0x8>
    227e:	0f 92       	push	r0
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9b 83       	std	Y+3, r25	; 0x03
    2286:	8a 83       	std	Y+2, r24	; 0x02
    2288:	7d 83       	std	Y+5, r23	; 0x05
    228a:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    228c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	9b 81       	ldd	r25, Y+3	; 0x03
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	89 f4       	brne	.+34     	; 0x22b8 <lcd_4bit_send_string+0x42>
		ret = E_NOK;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	13 c0       	rjmp	.+38     	; 0x22c2 <lcd_4bit_send_string+0x4c>
	}
	else{
		while(*str){
			ret = lcd_4bit_send_char_data(lcd, *str++);
    229c:	ec 81       	ldd	r30, Y+4	; 0x04
    229e:	fd 81       	ldd	r31, Y+5	; 0x05
    22a0:	20 81       	ld	r18, Z
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	9d 81       	ldd	r25, Y+5	; 0x05
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	9d 83       	std	Y+5, r25	; 0x05
    22aa:	8c 83       	std	Y+4, r24	; 0x04
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	9b 81       	ldd	r25, Y+3	; 0x03
    22b0:	62 2f       	mov	r22, r18
    22b2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_4bit_send_char_data>
    22b6:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType ret = E_OK;
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		while(*str){
    22b8:	ec 81       	ldd	r30, Y+4	; 0x04
    22ba:	fd 81       	ldd	r31, Y+5	; 0x05
    22bc:	80 81       	ld	r24, Z
    22be:	88 23       	and	r24, r24
    22c0:	69 f7       	brne	.-38     	; 0x229c <lcd_4bit_send_string+0x26>
			ret = lcd_4bit_send_char_data(lcd, *str++);
		}
	}
	return ret;
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <lcd_4bit_send_string_pos>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd, uint8 row, uint8 column, uint8 *str){
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	27 97       	sbiw	r28, 0x07	; 7
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	9b 83       	std	Y+3, r25	; 0x03
    22ea:	8a 83       	std	Y+2, r24	; 0x02
    22ec:	6c 83       	std	Y+4, r22	; 0x04
    22ee:	4d 83       	std	Y+5, r20	; 0x05
    22f0:	3f 83       	std	Y+7, r19	; 0x07
    22f2:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    22f4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	19 f4       	brne	.+6      	; 0x2304 <lcd_4bit_send_string_pos+0x30>
		ret = E_NOK;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	1b c0       	rjmp	.+54     	; 0x233a <lcd_4bit_send_string_pos+0x66>
	}
	else{
		ret = lcd_4bit_set_cursor(lcd, row, column);
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	6c 81       	ldd	r22, Y+4	; 0x04
    230a:	4d 81       	ldd	r20, Y+5	; 0x05
    230c:	0e 94 19 18 	call	0x3032	; 0x3032 <lcd_4bit_set_cursor>
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	0e c0       	rjmp	.+28     	; 0x2330 <lcd_4bit_send_string_pos+0x5c>
		while(*str){
			ret = lcd_4bit_send_char_data(lcd, *str++);
    2314:	ee 81       	ldd	r30, Y+6	; 0x06
    2316:	ff 81       	ldd	r31, Y+7	; 0x07
    2318:	20 81       	ld	r18, Z
    231a:	8e 81       	ldd	r24, Y+6	; 0x06
    231c:	9f 81       	ldd	r25, Y+7	; 0x07
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	9f 83       	std	Y+7, r25	; 0x07
    2322:	8e 83       	std	Y+6, r24	; 0x06
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	62 2f       	mov	r22, r18
    232a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_4bit_send_char_data>
    232e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		ret = lcd_4bit_set_cursor(lcd, row, column);
		while(*str){
    2330:	ee 81       	ldd	r30, Y+6	; 0x06
    2332:	ff 81       	ldd	r31, Y+7	; 0x07
    2334:	80 81       	ld	r24, Z
    2336:	88 23       	and	r24, r24
    2338:	69 f7       	brne	.-38     	; 0x2314 <lcd_4bit_send_string_pos+0x40>
			ret = lcd_4bit_send_char_data(lcd, *str++);
		}
	}
	return ret;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
}
    233c:	27 96       	adiw	r28, 0x07	; 7
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <lcd_4bit_send_custom_char>:
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd, uint8 row, uint8 column,
		const uint8 _chr[], uint8 mem_pos){
    234e:	0f 93       	push	r16
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	29 97       	sbiw	r28, 0x09	; 9
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	6d 83       	std	Y+5, r22	; 0x05
    236a:	4e 83       	std	Y+6, r20	; 0x06
    236c:	38 87       	std	Y+8, r19	; 0x08
    236e:	2f 83       	std	Y+7, r18	; 0x07
    2370:	09 87       	std	Y+9, r16	; 0x09
	Std_ReturnType ret = E_OK;
    2372:	1a 82       	std	Y+2, r1	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    2374:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	9c 81       	ldd	r25, Y+4	; 0x04
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	19 f4       	brne	.+6      	; 0x2384 <lcd_4bit_send_custom_char+0x36>
		ret = E_NOK;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	30 c0       	rjmp	.+96     	; 0x23e4 <lcd_4bit_send_custom_char+0x96>
	}
	else{
		ret = lcd_4bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
    2384:	89 85       	ldd	r24, Y+9	; 0x09
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	08 96       	adiw	r24, 0x08	; 8
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	28 2f       	mov	r18, r24
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	62 2f       	mov	r22, r18
    23a0:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    23a4:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    23a6:	19 82       	std	Y+1, r1	; 0x01
    23a8:	12 c0       	rjmp	.+36     	; 0x23ce <lcd_4bit_send_custom_char+0x80>
			ret = lcd_4bit_send_char_data(lcd, _chr[lcd_counter]);
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	8f 81       	ldd	r24, Y+7	; 0x07
    23b2:	98 85       	ldd	r25, Y+8	; 0x08
    23b4:	fc 01       	movw	r30, r24
    23b6:	e2 0f       	add	r30, r18
    23b8:	f3 1f       	adc	r31, r19
    23ba:	20 81       	ld	r18, Z
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	62 2f       	mov	r22, r18
    23c2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <lcd_4bit_send_char_data>
    23c6:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		ret = lcd_4bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	8f 5f       	subi	r24, 0xFF	; 255
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	88 30       	cpi	r24, 0x08	; 8
    23d2:	58 f3       	brcs	.-42     	; 0x23aa <lcd_4bit_send_custom_char+0x5c>
			ret = lcd_4bit_send_char_data(lcd, _chr[lcd_counter]);
		}
		ret = lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	6d 81       	ldd	r22, Y+5	; 0x05
    23da:	4e 81       	ldd	r20, Y+6	; 0x06
    23dc:	29 85       	ldd	r18, Y+9	; 0x09
    23de:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_4bit_send_char_data_pos>
    23e2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23e6:	29 96       	adiw	r28, 0x09	; 9
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	0f 91       	pop	r16
    23f8:	08 95       	ret

000023fa <lcd_8bit_intialize>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_intialize(const chr_lcd_8bit_t *lcd){
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	ae 97       	sbiw	r28, 0x2e	; 46
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	9e a7       	std	Y+46, r25	; 0x2e
    2410:	8d a7       	std	Y+45, r24	; 0x2d
	Std_ReturnType ret = E_OK;
    2412:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 l_data_pins_counter = ZERO_INIT;
    2414:	1b a6       	std	Y+43, r1	; 0x2b
	if(NULL == lcd){
    2416:	8d a5       	ldd	r24, Y+45	; 0x2d
    2418:	9e a5       	ldd	r25, Y+46	; 0x2e
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	19 f4       	brne	.+6      	; 0x2424 <lcd_8bit_intialize+0x2a>
		ret = E_NOK;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	8c a7       	std	Y+44, r24	; 0x2c
    2422:	ae c1       	rjmp	.+860    	; 0x2780 <lcd_8bit_intialize+0x386>
	}
	else{
		ret = gpio_pin_initalize(&(lcd->lcd_rs));
    2424:	8d a5       	ldd	r24, Y+45	; 0x2d
    2426:	9e a5       	ldd	r25, Y+46	; 0x2e
    2428:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    242c:	8c a7       	std	Y+44, r24	; 0x2c
		ret = gpio_pin_initalize(&(lcd->lcd_en));
    242e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2430:	9e a5       	ldd	r25, Y+46	; 0x2e
    2432:	02 96       	adiw	r24, 0x02	; 2
    2434:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    2438:	8c a7       	std	Y+44, r24	; 0x2c
		for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<8; l_data_pins_counter++){
    243a:	1b a6       	std	Y+43, r1	; 0x2b
    243c:	12 c0       	rjmp	.+36     	; 0x2462 <lcd_8bit_intialize+0x68>
			ret = gpio_pin_initalize(&(lcd->lcd_data[l_data_pins_counter]));
    243e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2440:	9e a5       	ldd	r25, Y+46	; 0x2e
    2442:	9c 01       	movw	r18, r24
    2444:	2c 5f       	subi	r18, 0xFC	; 252
    2446:	3f 4f       	sbci	r19, 0xFF	; 255
    2448:	8b a5       	ldd	r24, Y+43	; 0x2b
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    245a:	8c a7       	std	Y+44, r24	; 0x2c
		ret = E_NOK;
	}
	else{
		ret = gpio_pin_initalize(&(lcd->lcd_rs));
		ret = gpio_pin_initalize(&(lcd->lcd_en));
		for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<8; l_data_pins_counter++){
    245c:	8b a5       	ldd	r24, Y+43	; 0x2b
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	8b a7       	std	Y+43, r24	; 0x2b
    2462:	8b a5       	ldd	r24, Y+43	; 0x2b
    2464:	88 30       	cpi	r24, 0x08	; 8
    2466:	58 f3       	brcs	.-42     	; 0x243e <lcd_8bit_intialize+0x44>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a0 ea       	ldi	r26, 0xA0	; 160
    246e:	b1 e4       	ldi	r27, 0x41	; 65
    2470:	8f a3       	std	Y+39, r24	; 0x27
    2472:	98 a7       	std	Y+40, r25	; 0x28
    2474:	a9 a7       	std	Y+41, r26	; 0x29
    2476:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2478:	6f a1       	ldd	r22, Y+39	; 0x27
    247a:	78 a5       	ldd	r23, Y+40	; 0x28
    247c:	89 a5       	ldd	r24, Y+41	; 0x29
    247e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	55 e4       	ldi	r21, 0x45	; 69
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8b a3       	std	Y+35, r24	; 0x23
    2492:	9c a3       	std	Y+36, r25	; 0x24
    2494:	ad a3       	std	Y+37, r26	; 0x25
    2496:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2498:	6b a1       	ldd	r22, Y+35	; 0x23
    249a:	7c a1       	ldd	r23, Y+36	; 0x24
    249c:	8d a1       	ldd	r24, Y+37	; 0x25
    249e:	9e a1       	ldd	r25, Y+38	; 0x26
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <lcd_8bit_intialize+0xc0>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9a a3       	std	Y+34, r25	; 0x22
    24b6:	89 a3       	std	Y+33, r24	; 0x21
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <lcd_8bit_intialize+0x13e>
	else if (__tmp > 65535)
    24ba:	6b a1       	ldd	r22, Y+35	; 0x23
    24bc:	7c a1       	ldd	r23, Y+36	; 0x24
    24be:	8d a1       	ldd	r24, Y+37	; 0x25
    24c0:	9e a1       	ldd	r25, Y+38	; 0x26
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	3f ef       	ldi	r19, 0xFF	; 255
    24c6:	4f e7       	ldi	r20, 0x7F	; 127
    24c8:	57 e4       	ldi	r21, 0x47	; 71
    24ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <lcd_8bit_intialize+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	6f a1       	ldd	r22, Y+39	; 0x27
    24d4:	78 a5       	ldd	r23, Y+40	; 0x28
    24d6:	89 a5       	ldd	r24, Y+41	; 0x29
    24d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9a a3       	std	Y+34, r25	; 0x22
    24f8:	89 a3       	std	Y+33, r24	; 0x21
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <lcd_8bit_intialize+0x120>
    24fc:	80 e9       	ldi	r24, 0x90	; 144
    24fe:	91 e0       	ldi	r25, 0x01	; 1
    2500:	98 a3       	std	Y+32, r25	; 0x20
    2502:	8f 8f       	std	Y+31, r24	; 0x1f
    2504:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2506:	98 a1       	ldd	r25, Y+32	; 0x20
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <lcd_8bit_intialize+0x10e>
    250c:	98 a3       	std	Y+32, r25	; 0x20
    250e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	89 a1       	ldd	r24, Y+33	; 0x21
    2512:	9a a1       	ldd	r25, Y+34	; 0x22
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9a a3       	std	Y+34, r25	; 0x22
    2518:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	89 a1       	ldd	r24, Y+33	; 0x21
    251c:	9a a1       	ldd	r25, Y+34	; 0x22
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <lcd_8bit_intialize+0x102>
    2522:	14 c0       	rjmp	.+40     	; 0x254c <lcd_8bit_intialize+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6b a1       	ldd	r22, Y+35	; 0x23
    2526:	7c a1       	ldd	r23, Y+36	; 0x24
    2528:	8d a1       	ldd	r24, Y+37	; 0x25
    252a:	9e a1       	ldd	r25, Y+38	; 0x26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
    2538:	89 a1       	ldd	r24, Y+33	; 0x21
    253a:	9a a1       	ldd	r25, Y+34	; 0x22
    253c:	9e 8f       	std	Y+30, r25	; 0x1e
    253e:	8d 8f       	std	Y+29, r24	; 0x1d
    2540:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2542:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <lcd_8bit_intialize+0x14a>
    2548:	9e 8f       	std	Y+30, r25	; 0x1e
    254a:	8d 8f       	std	Y+29, r24	; 0x1d
			ret = gpio_pin_initalize(&(lcd->lcd_data[l_data_pins_counter]));
		}
		Delay_ms(20);
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    254c:	8d a5       	ldd	r24, Y+45	; 0x2d
    254e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2550:	68 e3       	ldi	r22, 0x38	; 56
    2552:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2556:	8c a7       	std	Y+44, r24	; 0x2c
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 ea       	ldi	r26, 0xA0	; 160
    255e:	b0 e4       	ldi	r27, 0x40	; 64
    2560:	89 8f       	std	Y+25, r24	; 0x19
    2562:	9a 8f       	std	Y+26, r25	; 0x1a
    2564:	ab 8f       	std	Y+27, r26	; 0x1b
    2566:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	69 8d       	ldd	r22, Y+25	; 0x19
    256a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a e7       	ldi	r20, 0x7A	; 122
    2576:	55 e4       	ldi	r21, 0x45	; 69
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8d 8b       	std	Y+21, r24	; 0x15
    2582:	9e 8b       	std	Y+22, r25	; 0x16
    2584:	af 8b       	std	Y+23, r26	; 0x17
    2586:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <lcd_8bit_intialize+0x1b0>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <lcd_8bit_intialize+0x22e>
	else if (__tmp > 65535)
    25aa:	6d 89       	ldd	r22, Y+21	; 0x15
    25ac:	7e 89       	ldd	r23, Y+22	; 0x16
    25ae:	8f 89       	ldd	r24, Y+23	; 0x17
    25b0:	98 8d       	ldd	r25, Y+24	; 0x18
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <lcd_8bit_intialize+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	69 8d       	ldd	r22, Y+25	; 0x19
    25c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9c 8b       	std	Y+20, r25	; 0x14
    25e8:	8b 8b       	std	Y+19, r24	; 0x13
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <lcd_8bit_intialize+0x210>
    25ec:	80 e9       	ldi	r24, 0x90	; 144
    25ee:	91 e0       	ldi	r25, 0x01	; 1
    25f0:	9a 8b       	std	Y+18, r25	; 0x12
    25f2:	89 8b       	std	Y+17, r24	; 0x11
    25f4:	89 89       	ldd	r24, Y+17	; 0x11
    25f6:	9a 89       	ldd	r25, Y+18	; 0x12
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <lcd_8bit_intialize+0x1fe>
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8b 89       	ldd	r24, Y+19	; 0x13
    2602:	9c 89       	ldd	r25, Y+20	; 0x14
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8b 89       	ldd	r24, Y+19	; 0x13
    260c:	9c 89       	ldd	r25, Y+20	; 0x14
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <lcd_8bit_intialize+0x1f2>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <lcd_8bit_intialize+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6d 89       	ldd	r22, Y+21	; 0x15
    2616:	7e 89       	ldd	r23, Y+22	; 0x16
    2618:	8f 89       	ldd	r24, Y+23	; 0x17
    261a:	98 8d       	ldd	r25, Y+24	; 0x18
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	8b 8b       	std	Y+19, r24	; 0x13
    2628:	8b 89       	ldd	r24, Y+19	; 0x13
    262a:	9c 89       	ldd	r25, Y+20	; 0x14
    262c:	98 8b       	std	Y+16, r25	; 0x10
    262e:	8f 87       	std	Y+15, r24	; 0x0f
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <lcd_8bit_intialize+0x23a>
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
		Delay_ms(5);
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    263c:	8d a5       	ldd	r24, Y+45	; 0x2d
    263e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2640:	68 e3       	ldi	r22, 0x38	; 56
    2642:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2646:	8c a7       	std	Y+44, r24	; 0x2c
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a6 e1       	ldi	r26, 0x16	; 22
    264e:	b3 e4       	ldi	r27, 0x43	; 67
    2650:	8b 87       	std	Y+11, r24	; 0x0b
    2652:	9c 87       	std	Y+12, r25	; 0x0c
    2654:	ad 87       	std	Y+13, r26	; 0x0d
    2656:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	6b 85       	ldd	r22, Y+11	; 0x0b
    265a:	7c 85       	ldd	r23, Y+12	; 0x0c
    265c:	8d 85       	ldd	r24, Y+13	; 0x0d
    265e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	55 e4       	ldi	r21, 0x45	; 69
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8f 83       	std	Y+7, r24	; 0x07
    2672:	98 87       	std	Y+8, r25	; 0x08
    2674:	a9 87       	std	Y+9, r26	; 0x09
    2676:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2678:	6f 81       	ldd	r22, Y+7	; 0x07
    267a:	78 85       	ldd	r23, Y+8	; 0x08
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <lcd_8bit_intialize+0x2a0>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <lcd_8bit_intialize+0x31e>
	else if (__tmp > 65535)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <lcd_8bit_intialize+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e2       	ldi	r20, 0x20	; 32
    26c0:	51 e4       	ldi	r21, 0x41	; 65
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <lcd_8bit_intialize+0x300>
    26dc:	80 e9       	ldi	r24, 0x90	; 144
    26de:	91 e0       	ldi	r25, 0x01	; 1
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	8b 83       	std	Y+3, r24	; 0x03
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <lcd_8bit_intialize+0x2ee>
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9e 83       	std	Y+6, r25	; 0x06
    26f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <lcd_8bit_intialize+0x2e2>
    2702:	14 c0       	rjmp	.+40     	; 0x272c <lcd_8bit_intialize+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <lcd_8bit_intialize+0x32a>
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
		Delay_ms(150);
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    272c:	8d a5       	ldd	r24, Y+45	; 0x2d
    272e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2730:	68 e3       	ldi	r22, 0x38	; 56
    2732:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2736:	8c a7       	std	Y+44, r24	; 0x2c

		ret = lcd_8bit_send_command(lcd, _LCD_CLEAR);
    2738:	8d a5       	ldd	r24, Y+45	; 0x2d
    273a:	9e a5       	ldd	r25, Y+46	; 0x2e
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2742:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_RETURN_HOME);
    2744:	8d a5       	ldd	r24, Y+45	; 0x2d
    2746:	9e a5       	ldd	r25, Y+46	; 0x2e
    2748:	62 e0       	ldi	r22, 0x02	; 2
    274a:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    274e:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
    2750:	8d a5       	ldd	r24, Y+45	; 0x2d
    2752:	9e a5       	ldd	r25, Y+46	; 0x2e
    2754:	66 e0       	ldi	r22, 0x06	; 6
    2756:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    275a:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    275c:	8d a5       	ldd	r24, Y+45	; 0x2d
    275e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2760:	6c e0       	ldi	r22, 0x0C	; 12
    2762:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2766:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2768:	8d a5       	ldd	r24, Y+45	; 0x2d
    276a:	9e a5       	ldd	r25, Y+46	; 0x2e
    276c:	68 e3       	ldi	r22, 0x38	; 56
    276e:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2772:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, 0x80);
    2774:	8d a5       	ldd	r24, Y+45	; 0x2d
    2776:	9e a5       	ldd	r25, Y+46	; 0x2e
    2778:	60 e8       	ldi	r22, 0x80	; 128
    277a:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    277e:	8c a7       	std	Y+44, r24	; 0x2c
	}
	return ret;
    2780:	8c a5       	ldd	r24, Y+44	; 0x2c
}
    2782:	ae 96       	adiw	r28, 0x2e	; 46
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <lcd_8bit_send_command>:
 * @param command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_command(const chr_lcd_8bit_t *lcd, uint8 command){
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <lcd_8bit_send_command+0x6>
    279a:	00 d0       	rcall	.+0      	; 0x279c <lcd_8bit_send_command+0x8>
    279c:	0f 92       	push	r0
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9c 83       	std	Y+4, r25	; 0x04
    27a4:	8b 83       	std	Y+3, r24	; 0x03
    27a6:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
    27a8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 l_pin_counter = ZERO_INIT;
    27aa:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	19 f4       	brne	.+6      	; 0x27ba <lcd_8bit_send_command+0x26>
		ret = E_NOK;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	8a 83       	std	Y+2, r24	; 0x02
    27b8:	34 c0       	rjmp	.+104    	; 0x2822 <lcd_8bit_send_command+0x8e>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), LOW);
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    27c4:	8a 83       	std	Y+2, r24	; 0x02
		/* Send the Command through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    27c6:	19 82       	std	Y+1, r1	; 0x01
    27c8:	24 c0       	rjmp	.+72     	; 0x2812 <lcd_8bit_send_command+0x7e>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command >> l_pin_counter) & (uint8)0x01);
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	9c 01       	movw	r18, r24
    27d0:	2c 5f       	subi	r18, 0xFC	; 252
    27d2:	3f 4f       	sbci	r19, 0xFF	; 255
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	a9 01       	movw	r20, r18
    27e0:	48 0f       	add	r20, r24
    27e2:	59 1f       	adc	r21, r25
    27e4:	8d 81       	ldd	r24, Y+5	; 0x05
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	b9 01       	movw	r22, r18
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <lcd_8bit_send_command+0x64>
    27f4:	75 95       	asr	r23
    27f6:	67 95       	ror	r22
    27f8:	8a 95       	dec	r24
    27fa:	e2 f7       	brpl	.-8      	; 0x27f4 <lcd_8bit_send_command+0x60>
    27fc:	cb 01       	movw	r24, r22
    27fe:	28 2f       	mov	r18, r24
    2800:	21 70       	andi	r18, 0x01	; 1
    2802:	ca 01       	movw	r24, r20
    2804:	62 2f       	mov	r22, r18
    2806:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    280a:	8a 83       	std	Y+2, r24	; 0x02
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), LOW);
		/* Send the Command through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	8f 5f       	subi	r24, 0xFF	; 255
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	88 30       	cpi	r24, 0x08	; 8
    2816:	c8 f2       	brcs	.-78     	; 0x27ca <lcd_8bit_send_command+0x36>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command >> l_pin_counter) & (uint8)0x01);
		}
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_8bit_send_enable_signal(lcd);
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <lcd_8bit_send_enable_signal>
    2820:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <lcd_8bit_send_char_data>:
 * @param data
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_char_data(const chr_lcd_8bit_t *lcd, uint8 data){
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <lcd_8bit_send_char_data+0x6>
    283a:	00 d0       	rcall	.+0      	; 0x283c <lcd_8bit_send_char_data+0x8>
    283c:	0f 92       	push	r0
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	9c 83       	std	Y+4, r25	; 0x04
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
    2848:	1a 82       	std	Y+2, r1	; 0x02
	uint8 l_pin_counter = ZERO_INIT;
    284a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	19 f4       	brne	.+6      	; 0x285a <lcd_8bit_send_char_data+0x26>
		ret = E_NOK;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	8a 83       	std	Y+2, r24	; 0x02
    2858:	34 c0       	rjmp	.+104    	; 0x28c2 <lcd_8bit_send_char_data+0x8e>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), HIGH);
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	9c 81       	ldd	r25, Y+4	; 0x04
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2864:	8a 83       	std	Y+2, r24	; 0x02
		/* Send the Data through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    2866:	19 82       	std	Y+1, r1	; 0x01
    2868:	24 c0       	rjmp	.+72     	; 0x28b2 <lcd_8bit_send_char_data+0x7e>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data >> l_pin_counter) & (uint8)0x01);
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	9c 81       	ldd	r25, Y+4	; 0x04
    286e:	9c 01       	movw	r18, r24
    2870:	2c 5f       	subi	r18, 0xFC	; 252
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	a9 01       	movw	r20, r18
    2880:	48 0f       	add	r20, r24
    2882:	59 1f       	adc	r21, r25
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	88 2f       	mov	r24, r24
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	b9 01       	movw	r22, r18
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <lcd_8bit_send_char_data+0x64>
    2894:	75 95       	asr	r23
    2896:	67 95       	ror	r22
    2898:	8a 95       	dec	r24
    289a:	e2 f7       	brpl	.-8      	; 0x2894 <lcd_8bit_send_char_data+0x60>
    289c:	cb 01       	movw	r24, r22
    289e:	28 2f       	mov	r18, r24
    28a0:	21 70       	andi	r18, 0x01	; 1
    28a2:	ca 01       	movw	r24, r20
    28a4:	62 2f       	mov	r22, r18
    28a6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    28aa:	8a 83       	std	Y+2, r24	; 0x02
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), HIGH);
		/* Send the Data through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	88 30       	cpi	r24, 0x08	; 8
    28b6:	c8 f2       	brcs	.-78     	; 0x286a <lcd_8bit_send_char_data+0x36>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data >> l_pin_counter) & (uint8)0x01);
		}
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_8bit_send_enable_signal(lcd);
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <lcd_8bit_send_enable_signal>
    28c0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <lcd_8bit_send_char_data_pos>:
 * @param data
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_char_data_pos(const chr_lcd_8bit_t *lcd,uint8 row, uint8 column, uint8 data){
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <lcd_8bit_send_char_data_pos+0x6>
    28da:	00 d0       	rcall	.+0      	; 0x28dc <lcd_8bit_send_char_data_pos+0x8>
    28dc:	00 d0       	rcall	.+0      	; 0x28de <lcd_8bit_send_char_data_pos+0xa>
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	9b 83       	std	Y+3, r25	; 0x03
    28e4:	8a 83       	std	Y+2, r24	; 0x02
    28e6:	6c 83       	std	Y+4, r22	; 0x04
    28e8:	4d 83       	std	Y+5, r20	; 0x05
    28ea:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    28ec:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	9b 81       	ldd	r25, Y+3	; 0x03
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	19 f4       	brne	.+6      	; 0x28fc <lcd_8bit_send_char_data_pos+0x28>
		ret = E_NOK;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	0d c0       	rjmp	.+26     	; 0x2916 <lcd_8bit_send_char_data_pos+0x42>
	}
	else{
		ret = lcd_8bit_set_cursor(lcd, row, column);
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	6c 81       	ldd	r22, Y+4	; 0x04
    2902:	4d 81       	ldd	r20, Y+5	; 0x05
    2904:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <lcd_8bit_set_cursor>
    2908:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_8bit_send_char_data(lcd, data);
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	9b 81       	ldd	r25, Y+3	; 0x03
    290e:	6e 81       	ldd	r22, Y+6	; 0x06
    2910:	0e 94 1a 14 	call	0x2834	; 0x2834 <lcd_8bit_send_char_data>
    2914:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
}
    2918:	26 96       	adiw	r28, 0x06	; 6
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <lcd_8bit_send_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_string(const chr_lcd_8bit_t *lcd, uint8 *str){
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <lcd_8bit_send_string+0x6>
    2930:	00 d0       	rcall	.+0      	; 0x2932 <lcd_8bit_send_string+0x8>
    2932:	0f 92       	push	r0
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	9b 83       	std	Y+3, r25	; 0x03
    293a:	8a 83       	std	Y+2, r24	; 0x02
    293c:	7d 83       	std	Y+5, r23	; 0x05
    293e:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    2940:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	89 f4       	brne	.+34     	; 0x296c <lcd_8bit_send_string+0x42>
		ret = E_NOK;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	13 c0       	rjmp	.+38     	; 0x2976 <lcd_8bit_send_string+0x4c>
	}
	else{
		while(*str){
			ret = lcd_8bit_send_char_data(lcd, *str++);
    2950:	ec 81       	ldd	r30, Y+4	; 0x04
    2952:	fd 81       	ldd	r31, Y+5	; 0x05
    2954:	20 81       	ld	r18, Z
    2956:	8c 81       	ldd	r24, Y+4	; 0x04
    2958:	9d 81       	ldd	r25, Y+5	; 0x05
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	9d 83       	std	Y+5, r25	; 0x05
    295e:	8c 83       	std	Y+4, r24	; 0x04
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	62 2f       	mov	r22, r18
    2966:	0e 94 1a 14 	call	0x2834	; 0x2834 <lcd_8bit_send_char_data>
    296a:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType ret = E_OK;
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		while(*str){
    296c:	ec 81       	ldd	r30, Y+4	; 0x04
    296e:	fd 81       	ldd	r31, Y+5	; 0x05
    2970:	80 81       	ld	r24, Z
    2972:	88 23       	and	r24, r24
    2974:	69 f7       	brne	.-38     	; 0x2950 <lcd_8bit_send_string+0x26>
			ret = lcd_8bit_send_char_data(lcd, *str++);
		}
	}
	return ret;
    2976:	89 81       	ldd	r24, Y+1	; 0x01
}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <lcd_8bit_send_string_pos>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_string_pos(const chr_lcd_8bit_t *lcd, uint8 row, uint8 column, uint8 *str){
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	27 97       	sbiw	r28, 0x07	; 7
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	9b 83       	std	Y+3, r25	; 0x03
    299e:	8a 83       	std	Y+2, r24	; 0x02
    29a0:	6c 83       	std	Y+4, r22	; 0x04
    29a2:	4d 83       	std	Y+5, r20	; 0x05
    29a4:	3f 83       	std	Y+7, r19	; 0x07
    29a6:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    29a8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	9b 81       	ldd	r25, Y+3	; 0x03
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	19 f4       	brne	.+6      	; 0x29b8 <lcd_8bit_send_string_pos+0x30>
		ret = E_NOK;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <lcd_8bit_send_string_pos+0x4e>
	}
	else{
		ret = lcd_8bit_set_cursor(lcd, row, column);
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	9b 81       	ldd	r25, Y+3	; 0x03
    29bc:	6c 81       	ldd	r22, Y+4	; 0x04
    29be:	4d 81       	ldd	r20, Y+5	; 0x05
    29c0:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <lcd_8bit_set_cursor>
    29c4:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_8bit_send_string(lcd, str);
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ca:	2e 81       	ldd	r18, Y+6	; 0x06
    29cc:	3f 81       	ldd	r19, Y+7	; 0x07
    29ce:	b9 01       	movw	r22, r18
    29d0:	0e 94 95 14 	call	0x292a	; 0x292a <lcd_8bit_send_string>
    29d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d8:	27 96       	adiw	r28, 0x07	; 7
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <lcd_8bit_send_custom_char>:
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd, uint8 row, uint8 column,
		const uint8 _chr[], uint8 mem_pos){
    29ea:	0f 93       	push	r16
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	29 97       	sbiw	r28, 0x09	; 9
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	9c 83       	std	Y+4, r25	; 0x04
    2a02:	8b 83       	std	Y+3, r24	; 0x03
    2a04:	6d 83       	std	Y+5, r22	; 0x05
    2a06:	4e 83       	std	Y+6, r20	; 0x06
    2a08:	38 87       	std	Y+8, r19	; 0x08
    2a0a:	2f 83       	std	Y+7, r18	; 0x07
    2a0c:	09 87       	std	Y+9, r16	; 0x09
	Std_ReturnType ret = E_OK;
    2a0e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    2a10:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	19 f4       	brne	.+6      	; 0x2a20 <lcd_8bit_send_custom_char+0x36>
		ret = E_NOK;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
    2a1e:	30 c0       	rjmp	.+96     	; 0x2a80 <lcd_8bit_send_custom_char+0x96>
	}
	else{
		ret = lcd_8bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	08 96       	adiw	r24, 0x08	; 8
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	28 2f       	mov	r18, r24
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	62 2f       	mov	r22, r18
    2a3c:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2a40:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    2a42:	19 82       	std	Y+1, r1	; 0x01
    2a44:	12 c0       	rjmp	.+36     	; 0x2a6a <lcd_8bit_send_custom_char+0x80>
			ret = lcd_8bit_send_char_data(lcd, _chr[lcd_counter]);
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4e:	98 85       	ldd	r25, Y+8	; 0x08
    2a50:	fc 01       	movw	r30, r24
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	20 81       	ld	r18, Z
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	62 2f       	mov	r22, r18
    2a5e:	0e 94 1a 14 	call	0x2834	; 0x2834 <lcd_8bit_send_char_data>
    2a62:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		ret = lcd_8bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	8f 5f       	subi	r24, 0xFF	; 255
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	88 30       	cpi	r24, 0x08	; 8
    2a6e:	58 f3       	brcs	.-42     	; 0x2a46 <lcd_8bit_send_custom_char+0x5c>
			ret = lcd_8bit_send_char_data(lcd, _chr[lcd_counter]);
		}
		ret = lcd_8bit_send_char_data_pos(lcd, row, column, mem_pos);
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	6d 81       	ldd	r22, Y+5	; 0x05
    2a76:	4e 81       	ldd	r20, Y+6	; 0x06
    2a78:	29 85       	ldd	r18, Y+9	; 0x09
    2a7a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <lcd_8bit_send_char_data_pos>
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a82:	29 96       	adiw	r28, 0x09	; 9
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	0f 91       	pop	r16
    2a94:	08 95       	ret

00002a96 <convert_uint8_to_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType convert_uint8_to_string(uint8 value, uint8 *str){
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <convert_uint8_to_string+0x6>
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <convert_uint8_to_string+0x8>
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	8a 83       	std	Y+2, r24	; 0x02
    2aa4:	7c 83       	std	Y+4, r23	; 0x04
    2aa6:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    2aa8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == str){
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	9c 81       	ldd	r25, Y+4	; 0x04
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	19 f4       	brne	.+6      	; 0x2ab8 <convert_uint8_to_string+0x22>
		ret = E_NOK;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	25 c0       	rjmp	.+74     	; 0x2b02 <convert_uint8_to_string+0x6c>
	}
	else{
		memset((char *)str, '\0', 4);
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	9c 81       	ldd	r25, Y+4	; 0x04
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	44 e0       	ldi	r20, 0x04	; 4
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <memset>
		sprintf(str, "%i", value);
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <convert_uint8_to_string+0x3a>
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <convert_uint8_to_string+0x3c>
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <convert_uint8_to_string+0x3e>
    2ad4:	ed b7       	in	r30, 0x3d	; 61
    2ad6:	fe b7       	in	r31, 0x3e	; 62
    2ad8:	31 96       	adiw	r30, 0x01	; 1
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	8a e9       	ldi	r24, 0x9A	; 154
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	93 83       	std	Z+3, r25	; 0x03
    2ae8:	82 83       	std	Z+2, r24	; 0x02
    2aea:	35 83       	std	Z+5, r19	; 0x05
    2aec:	24 83       	std	Z+4, r18	; 0x04
    2aee:	0e 94 22 1b 	call	0x3644	; 0x3644 <sprintf>
    2af2:	8d b7       	in	r24, 0x3d	; 61
    2af4:	9e b7       	in	r25, 0x3e	; 62
    2af6:	06 96       	adiw	r24, 0x06	; 6
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	9e bf       	out	0x3e, r25	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <convert_uint16_to_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType convert_uint16_to_string(uint16 value, uint8 *str){
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	2c 97       	sbiw	r28, 0x0c	; 12
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	9a 87       	std	Y+10, r25	; 0x0a
    2b28:	89 87       	std	Y+9, r24	; 0x09
    2b2a:	7c 87       	std	Y+12, r23	; 0x0c
    2b2c:	6b 87       	std	Y+11, r22	; 0x0b
	Std_ReturnType ret = E_OK;
    2b2e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Temp_String[6] = {0};
    2b30:	86 e0       	ldi	r24, 0x06	; 6
    2b32:	fe 01       	movw	r30, r28
    2b34:	33 96       	adiw	r30, 0x03	; 3
    2b36:	df 01       	movw	r26, r30
    2b38:	98 2f       	mov	r25, r24
    2b3a:	1d 92       	st	X+, r1
    2b3c:	9a 95       	dec	r25
    2b3e:	e9 f7       	brne	.-6      	; 0x2b3a <convert_uint16_to_string+0x28>
	uint8 DataCounter = 0;
    2b40:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == str){
    2b42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	19 f4       	brne	.+6      	; 0x2b50 <convert_uint16_to_string+0x3e>
		ret = E_NOK;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	8a 83       	std	Y+2, r24	; 0x02
    2b4e:	4a c0       	rjmp	.+148    	; 0x2be4 <convert_uint16_to_string+0xd2>
	}
	else{
		memset(str, ' ', 5);
    2b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b52:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b54:	60 e2       	ldi	r22, 0x20	; 32
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	45 e0       	ldi	r20, 0x05	; 5
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <memset>
		str[5] = '\0';
    2b60:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b62:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b64:	fc 01       	movw	r30, r24
    2b66:	35 96       	adiw	r30, 0x05	; 5
    2b68:	10 82       	st	Z, r1
		sprintf((char *)Temp_String, "%i", value);
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <convert_uint16_to_string+0x5a>
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <convert_uint16_to_string+0x5c>
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <convert_uint16_to_string+0x5e>
    2b70:	ed b7       	in	r30, 0x3d	; 61
    2b72:	fe b7       	in	r31, 0x3e	; 62
    2b74:	31 96       	adiw	r30, 0x01	; 1
    2b76:	ce 01       	movw	r24, r28
    2b78:	03 96       	adiw	r24, 0x03	; 3
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	8a e9       	ldi	r24, 0x9A	; 154
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	93 83       	std	Z+3, r25	; 0x03
    2b84:	82 83       	std	Z+2, r24	; 0x02
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	95 83       	std	Z+5, r25	; 0x05
    2b8c:	84 83       	std	Z+4, r24	; 0x04
    2b8e:	0e 94 22 1b 	call	0x3644	; 0x3644 <sprintf>
    2b92:	ad b7       	in	r26, 0x3d	; 61
    2b94:	be b7       	in	r27, 0x3e	; 62
    2b96:	16 96       	adiw	r26, 0x06	; 6
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	be bf       	out	0x3e, r27	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	ad bf       	out	0x3d, r26	; 61
    2ba2:	15 c0       	rjmp	.+42     	; 0x2bce <convert_uint16_to_string+0xbc>
		while(Temp_String[DataCounter] != '\0'){
			str[DataCounter] = Temp_String[DataCounter];
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bac:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bae:	dc 01       	movw	r26, r24
    2bb0:	a2 0f       	add	r26, r18
    2bb2:	b3 1f       	adc	r27, r19
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	ce 01       	movw	r24, r28
    2bbc:	03 96       	adiw	r24, 0x03	; 3
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8c 93       	st	X, r24
			DataCounter++;
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	8f 5f       	subi	r24, 0xFF	; 255
    2bcc:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		memset(str, ' ', 5);
		str[5] = '\0';
		sprintf((char *)Temp_String, "%i", value);
		while(Temp_String[DataCounter] != '\0'){
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	03 96       	adiw	r24, 0x03	; 3
    2bd8:	fc 01       	movw	r30, r24
    2bda:	e2 0f       	add	r30, r18
    2bdc:	f3 1f       	adc	r31, r19
    2bde:	80 81       	ld	r24, Z
    2be0:	88 23       	and	r24, r24
    2be2:	01 f7       	brne	.-64     	; 0x2ba4 <convert_uint16_to_string+0x92>
			str[DataCounter] = Temp_String[DataCounter];
			DataCounter++;
		}
	}
	return ret;
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2be6:	2c 96       	adiw	r28, 0x0c	; 12
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <convert_uint32_to_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType convert_uint32_to_string(uint32 value, uint8 *str){
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <convert_uint32_to_string+0x6>
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <convert_uint32_to_string+0x8>
    2c00:	0f 92       	push	r0
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	9b 83       	std	Y+3, r25	; 0x03
    2c08:	8a 83       	std	Y+2, r24	; 0x02
    2c0a:	7d 83       	std	Y+5, r23	; 0x05
    2c0c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    2c0e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == str){
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
    2c12:	9d 81       	ldd	r25, Y+5	; 0x05
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	19 f4       	brne	.+6      	; 0x2c1e <convert_uint32_to_string+0x26>
		ret = E_NOK;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	24 c0       	rjmp	.+72     	; 0x2c66 <convert_uint32_to_string+0x6e>
	}
	else{
		memset((char *)str, '\0', 11);
    2c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c20:	9d 81       	ldd	r25, Y+5	; 0x05
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	4b e0       	ldi	r20, 0x0B	; 11
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <memset>
		sprintf(str, "%i", value);
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <convert_uint32_to_string+0x38>
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <convert_uint32_to_string+0x3a>
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <convert_uint32_to_string+0x3c>
    2c34:	ed b7       	in	r30, 0x3d	; 61
    2c36:	fe b7       	in	r31, 0x3e	; 62
    2c38:	31 96       	adiw	r30, 0x01	; 1
    2c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
    2c42:	8a e9       	ldi	r24, 0x9A	; 154
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	93 83       	std	Z+3, r25	; 0x03
    2c48:	82 83       	std	Z+2, r24	; 0x02
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	95 83       	std	Z+5, r25	; 0x05
    2c50:	84 83       	std	Z+4, r24	; 0x04
    2c52:	0e 94 22 1b 	call	0x3644	; 0x3644 <sprintf>
    2c56:	8d b7       	in	r24, 0x3d	; 61
    2c58:	9e b7       	in	r25, 0x3e	; 62
    2c5a:	06 96       	adiw	r24, 0x06	; 6
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	9e bf       	out	0x3e, r25	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <lcd_send_4bits>:
 * @param _data_command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_send_4bits(const chr_lcd_4bit_t *lcd, uint8 _data_command){
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <lcd_send_4bits+0x6>
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <lcd_send_4bits+0x8>
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	9b 83       	std	Y+3, r25	; 0x03
    2c86:	8a 83       	std	Y+2, r24	; 0x02
    2c88:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    2c8a:	19 82       	std	Y+1, r1	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c90:	9c 01       	movw	r18, r24
    2c92:	2c 5f       	subi	r18, 0xFC	; 252
    2c94:	3f 4f       	sbci	r19, 0xFF	; 255
    2c96:	8c 81       	ldd	r24, Y+4	; 0x04
    2c98:	48 2f       	mov	r20, r24
    2c9a:	41 70       	andi	r20, 0x01	; 1
    2c9c:	c9 01       	movw	r24, r18
    2c9e:	64 2f       	mov	r22, r20
    2ca0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2ca4:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	9c 01       	movw	r18, r24
    2cac:	2a 5f       	subi	r18, 0xFA	; 250
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	86 95       	lsr	r24
    2cb4:	48 2f       	mov	r20, r24
    2cb6:	41 70       	andi	r20, 0x01	; 1
    2cb8:	c9 01       	movw	r24, r18
    2cba:	64 2f       	mov	r22, r20
    2cbc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2cc0:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	9c 01       	movw	r18, r24
    2cc8:	28 5f       	subi	r18, 0xF8	; 248
    2cca:	3f 4f       	sbci	r19, 0xFF	; 255
    2ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cce:	86 95       	lsr	r24
    2cd0:	86 95       	lsr	r24
    2cd2:	48 2f       	mov	r20, r24
    2cd4:	41 70       	andi	r20, 0x01	; 1
    2cd6:	c9 01       	movw	r24, r18
    2cd8:	64 2f       	mov	r22, r20
    2cda:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2cde:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce4:	9c 01       	movw	r18, r24
    2ce6:	26 5f       	subi	r18, 0xF6	; 246
    2ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cea:	8c 81       	ldd	r24, Y+4	; 0x04
    2cec:	86 95       	lsr	r24
    2cee:	86 95       	lsr	r24
    2cf0:	86 95       	lsr	r24
    2cf2:	48 2f       	mov	r20, r24
    2cf4:	41 70       	andi	r20, 0x01	; 1
    2cf6:	c9 01       	movw	r24, r18
    2cf8:	64 2f       	mov	r22, r20
    2cfa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <lcd_4bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_4bit_send_enable_signal(const chr_lcd_4bit_t *lcd){
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	61 97       	sbiw	r28, 0x11	; 17
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	99 8b       	std	Y+17, r25	; 0x11
    2d26:	88 8b       	std	Y+16, r24	; 0x10
	Std_ReturnType ret = E_OK;
    2d28:	1f 86       	std	Y+15, r1	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en), HIGH);
    2d2a:	88 89       	ldd	r24, Y+16	; 0x10
    2d2c:	99 89       	ldd	r25, Y+17	; 0x11
    2d2e:	02 96       	adiw	r24, 0x02	; 2
    2d30:	61 e0       	ldi	r22, 0x01	; 1
    2d32:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2d36:	8f 87       	std	Y+15, r24	; 0x0f
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	a0 ea       	ldi	r26, 0xA0	; 160
    2d3e:	b0 e4       	ldi	r27, 0x40	; 64
    2d40:	8b 87       	std	Y+11, r24	; 0x0b
    2d42:	9c 87       	std	Y+12, r25	; 0x0c
    2d44:	ad 87       	std	Y+13, r26	; 0x0d
    2d46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	4a e7       	ldi	r20, 0x7A	; 122
    2d56:	55 e4       	ldi	r21, 0x45	; 69
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	8f 83       	std	Y+7, r24	; 0x07
    2d62:	98 87       	std	Y+8, r25	; 0x08
    2d64:	a9 87       	std	Y+9, r26	; 0x09
    2d66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d68:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6a:	78 85       	ldd	r23, Y+8	; 0x08
    2d6c:	89 85       	ldd	r24, Y+9	; 0x09
    2d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e8       	ldi	r20, 0x80	; 128
    2d76:	5f e3       	ldi	r21, 0x3F	; 63
    2d78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d7c:	88 23       	and	r24, r24
    2d7e:	2c f4       	brge	.+10     	; 0x2d8a <lcd_4bit_send_enable_signal+0x7a>
		__ticks = 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
    2d88:	3f c0       	rjmp	.+126    	; 0x2e08 <lcd_4bit_send_enable_signal+0xf8>
	else if (__tmp > 65535)
    2d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8c:	78 85       	ldd	r23, Y+8	; 0x08
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	3f ef       	ldi	r19, 0xFF	; 255
    2d96:	4f e7       	ldi	r20, 0x7F	; 127
    2d98:	57 e4       	ldi	r21, 0x47	; 71
    2d9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d9e:	18 16       	cp	r1, r24
    2da0:	4c f5       	brge	.+82     	; 0x2df4 <lcd_4bit_send_enable_signal+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <lcd_4bit_send_enable_signal+0xda>
    2dcc:	80 e9       	ldi	r24, 0x90	; 144
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <lcd_4bit_send_enable_signal+0xc8>
    2ddc:	9c 83       	std	Y+4, r25	; 0x04
    2dde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	9e 83       	std	Y+6, r25	; 0x06
    2de8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	69 f7       	brne	.-38     	; 0x2dcc <lcd_4bit_send_enable_signal+0xbc>
    2df2:	14 c0       	rjmp	.+40     	; 0x2e1c <lcd_4bit_send_enable_signal+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	9a 81       	ldd	r25, Y+2	; 0x02
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <lcd_4bit_send_enable_signal+0x104>
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	89 83       	std	Y+1, r24	; 0x01
	Delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en), LOW);
    2e1c:	88 89       	ldd	r24, Y+16	; 0x10
    2e1e:	99 89       	ldd	r25, Y+17	; 0x11
    2e20:	02 96       	adiw	r24, 0x02	; 2
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2e28:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    2e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2e2c:	61 96       	adiw	r28, 0x11	; 17
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <lcd_8bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_8bit_send_enable_signal(const chr_lcd_8bit_t *lcd){
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	61 97       	sbiw	r28, 0x11	; 17
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	99 8b       	std	Y+17, r25	; 0x11
    2e54:	88 8b       	std	Y+16, r24	; 0x10
	Std_ReturnType ret = E_OK;
    2e56:	1f 86       	std	Y+15, r1	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en), HIGH);
    2e58:	88 89       	ldd	r24, Y+16	; 0x10
    2e5a:	99 89       	ldd	r25, Y+17	; 0x11
    2e5c:	02 96       	adiw	r24, 0x02	; 2
    2e5e:	61 e0       	ldi	r22, 0x01	; 1
    2e60:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2e64:	8f 87       	std	Y+15, r24	; 0x0f
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 ea       	ldi	r26, 0xA0	; 160
    2e6c:	b0 e4       	ldi	r27, 0x40	; 64
    2e6e:	8b 87       	std	Y+11, r24	; 0x0b
    2e70:	9c 87       	std	Y+12, r25	; 0x0c
    2e72:	ad 87       	std	Y+13, r26	; 0x0d
    2e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	4a e7       	ldi	r20, 0x7A	; 122
    2e84:	55 e4       	ldi	r21, 0x45	; 69
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	8f 83       	std	Y+7, r24	; 0x07
    2e90:	98 87       	std	Y+8, r25	; 0x08
    2e92:	a9 87       	std	Y+9, r26	; 0x09
    2e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <lcd_8bit_send_enable_signal+0x7a>
		__ticks = 1;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	3f c0       	rjmp	.+126    	; 0x2f36 <lcd_8bit_send_enable_signal+0xf8>
	else if (__tmp > 65535)
    2eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eba:	78 85       	ldd	r23, Y+8	; 0x08
    2ebc:	89 85       	ldd	r24, Y+9	; 0x09
    2ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	4c f5       	brge	.+82     	; 0x2f22 <lcd_8bit_send_enable_signal+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9e 83       	std	Y+6, r25	; 0x06
    2ef6:	8d 83       	std	Y+5, r24	; 0x05
    2ef8:	0f c0       	rjmp	.+30     	; 0x2f18 <lcd_8bit_send_enable_signal+0xda>
    2efa:	80 e9       	ldi	r24, 0x90	; 144
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	9c 83       	std	Y+4, r25	; 0x04
    2f00:	8b 83       	std	Y+3, r24	; 0x03
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	9c 81       	ldd	r25, Y+4	; 0x04
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <lcd_8bit_send_enable_signal+0xc8>
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	9e 81       	ldd	r25, Y+6	; 0x06
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <lcd_8bit_send_enable_signal+0xbc>
    2f20:	14 c0       	rjmp	.+40     	; 0x2f4a <lcd_8bit_send_enable_signal+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	6f 81       	ldd	r22, Y+7	; 0x07
    2f24:	78 85       	ldd	r23, Y+8	; 0x08
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <lcd_8bit_send_enable_signal+0x104>
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
	Delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en), LOW);
    2f4a:	88 89       	ldd	r24, Y+16	; 0x10
    2f4c:	99 89       	ldd	r25, Y+17	; 0x11
    2f4e:	02 96       	adiw	r24, 0x02	; 2
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
    2f56:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    2f58:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2f5a:	61 96       	adiw	r28, 0x11	; 17
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <lcd_8bit_set_cursor>:
 * @param coulmn Which column you need to print your character
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd, uint8 row, uint8 coulmn){
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	27 97       	sbiw	r28, 0x07	; 7
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	9b 83       	std	Y+3, r25	; 0x03
    2f82:	8a 83       	std	Y+2, r24	; 0x02
    2f84:	6c 83       	std	Y+4, r22	; 0x04
    2f86:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType ret = E_OK;
    2f88:	19 82       	std	Y+1, r1	; 0x01
	coulmn--;
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	81 50       	subi	r24, 0x01	; 1
    2f8e:	8d 83       	std	Y+5, r24	; 0x05
	switch(row){
    2f90:	8c 81       	ldd	r24, Y+4	; 0x04
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	3f 83       	std	Y+7, r19	; 0x07
    2f98:	2e 83       	std	Y+6, r18	; 0x06
    2f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f9e:	82 30       	cpi	r24, 0x02	; 2
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	01 f1       	breq	.+64     	; 0x2fe4 <lcd_8bit_set_cursor+0x78>
    2fa4:	2e 81       	ldd	r18, Y+6	; 0x06
    2fa6:	3f 81       	ldd	r19, Y+7	; 0x07
    2fa8:	23 30       	cpi	r18, 0x03	; 3
    2faa:	31 05       	cpc	r19, r1
    2fac:	34 f4       	brge	.+12     	; 0x2fba <lcd_8bit_set_cursor+0x4e>
    2fae:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	61 f0       	breq	.+24     	; 0x2fd0 <lcd_8bit_set_cursor+0x64>
    2fb8:	32 c0       	rjmp	.+100    	; 0x301e <lcd_8bit_set_cursor+0xb2>
    2fba:	2e 81       	ldd	r18, Y+6	; 0x06
    2fbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2fbe:	23 30       	cpi	r18, 0x03	; 3
    2fc0:	31 05       	cpc	r19, r1
    2fc2:	d1 f0       	breq	.+52     	; 0x2ff8 <lcd_8bit_set_cursor+0x8c>
    2fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc8:	84 30       	cpi	r24, 0x04	; 4
    2fca:	91 05       	cpc	r25, r1
    2fcc:	f9 f0       	breq	.+62     	; 0x300c <lcd_8bit_set_cursor+0xa0>
    2fce:	27 c0       	rjmp	.+78     	; 0x301e <lcd_8bit_set_cursor+0xb2>
	case ROW1 : ret = lcd_8bit_send_command(lcd, (0x80 + coulmn)); break; /* 0x00 -> Decimal : 0  */
    2fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	20 58       	subi	r18, 0x80	; 128
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	62 2f       	mov	r22, r18
    2fdc:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	1d c0       	rjmp	.+58     	; 0x301e <lcd_8bit_set_cursor+0xb2>
	case ROW2 : ret = lcd_8bit_send_command(lcd, (0xc0 + coulmn)); break; /* 0x40 -> Decimal : 64 */
    2fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	20 54       	subi	r18, 0x40	; 64
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	9b 81       	ldd	r25, Y+3	; 0x03
    2fee:	62 2f       	mov	r22, r18
    2ff0:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	13 c0       	rjmp	.+38     	; 0x301e <lcd_8bit_set_cursor+0xb2>
	case ROW3 : ret = lcd_8bit_send_command(lcd, (0x94 + coulmn)); break; /* 0x14 -> Decimal : 20 */
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	2c 56       	subi	r18, 0x6C	; 108
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	9b 81       	ldd	r25, Y+3	; 0x03
    3002:	62 2f       	mov	r22, r18
    3004:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    3008:	89 83       	std	Y+1, r24	; 0x01
    300a:	09 c0       	rjmp	.+18     	; 0x301e <lcd_8bit_set_cursor+0xb2>
	case ROW4 : ret = lcd_8bit_send_command(lcd, (0xd4 + coulmn)); break; /* 0x54 -> Decimal : 84 */
    300c:	8d 81       	ldd	r24, Y+5	; 0x05
    300e:	28 2f       	mov	r18, r24
    3010:	2c 52       	subi	r18, 0x2C	; 44
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	62 2f       	mov	r22, r18
    3018:	0e 94 ca 13 	call	0x2794	; 0x2794 <lcd_8bit_send_command>
    301c:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    301e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3020:	27 96       	adiw	r28, 0x07	; 7
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <lcd_4bit_set_cursor>:
 * @param coulmn
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn){
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	27 97       	sbiw	r28, 0x07	; 7
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	9b 83       	std	Y+3, r25	; 0x03
    3048:	8a 83       	std	Y+2, r24	; 0x02
    304a:	6c 83       	std	Y+4, r22	; 0x04
    304c:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType ret = E_OK;
    304e:	19 82       	std	Y+1, r1	; 0x01
	coulmn--;
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	81 50       	subi	r24, 0x01	; 1
    3054:	8d 83       	std	Y+5, r24	; 0x05
	switch(row){
    3056:	8c 81       	ldd	r24, Y+4	; 0x04
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	3f 83       	std	Y+7, r19	; 0x07
    305e:	2e 83       	std	Y+6, r18	; 0x06
    3060:	8e 81       	ldd	r24, Y+6	; 0x06
    3062:	9f 81       	ldd	r25, Y+7	; 0x07
    3064:	82 30       	cpi	r24, 0x02	; 2
    3066:	91 05       	cpc	r25, r1
    3068:	01 f1       	breq	.+64     	; 0x30aa <lcd_4bit_set_cursor+0x78>
    306a:	2e 81       	ldd	r18, Y+6	; 0x06
    306c:	3f 81       	ldd	r19, Y+7	; 0x07
    306e:	23 30       	cpi	r18, 0x03	; 3
    3070:	31 05       	cpc	r19, r1
    3072:	34 f4       	brge	.+12     	; 0x3080 <lcd_4bit_set_cursor+0x4e>
    3074:	8e 81       	ldd	r24, Y+6	; 0x06
    3076:	9f 81       	ldd	r25, Y+7	; 0x07
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	91 05       	cpc	r25, r1
    307c:	61 f0       	breq	.+24     	; 0x3096 <lcd_4bit_set_cursor+0x64>
    307e:	32 c0       	rjmp	.+100    	; 0x30e4 <lcd_4bit_set_cursor+0xb2>
    3080:	2e 81       	ldd	r18, Y+6	; 0x06
    3082:	3f 81       	ldd	r19, Y+7	; 0x07
    3084:	23 30       	cpi	r18, 0x03	; 3
    3086:	31 05       	cpc	r19, r1
    3088:	d1 f0       	breq	.+52     	; 0x30be <lcd_4bit_set_cursor+0x8c>
    308a:	8e 81       	ldd	r24, Y+6	; 0x06
    308c:	9f 81       	ldd	r25, Y+7	; 0x07
    308e:	84 30       	cpi	r24, 0x04	; 4
    3090:	91 05       	cpc	r25, r1
    3092:	f9 f0       	breq	.+62     	; 0x30d2 <lcd_4bit_set_cursor+0xa0>
    3094:	27 c0       	rjmp	.+78     	; 0x30e4 <lcd_4bit_set_cursor+0xb2>
	case ROW1 : ret = lcd_4bit_send_command(lcd, (0x80 + coulmn)); break;
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	28 2f       	mov	r18, r24
    309a:	20 58       	subi	r18, 0x80	; 128
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	9b 81       	ldd	r25, Y+3	; 0x03
    30a0:	62 2f       	mov	r22, r18
    30a2:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	1d c0       	rjmp	.+58     	; 0x30e4 <lcd_4bit_set_cursor+0xb2>
	case ROW2 : ret = lcd_4bit_send_command(lcd, (0xc0 + coulmn)); break;
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	28 2f       	mov	r18, r24
    30ae:	20 54       	subi	r18, 0x40	; 64
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	62 2f       	mov	r22, r18
    30b6:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	13 c0       	rjmp	.+38     	; 0x30e4 <lcd_4bit_set_cursor+0xb2>
	case ROW3 : ret = lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	28 2f       	mov	r18, r24
    30c2:	2c 56       	subi	r18, 0x6C	; 108
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	9b 81       	ldd	r25, Y+3	; 0x03
    30c8:	62 2f       	mov	r22, r18
    30ca:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    30ce:	89 83       	std	Y+1, r24	; 0x01
    30d0:	09 c0       	rjmp	.+18     	; 0x30e4 <lcd_4bit_set_cursor+0xb2>
	case ROW4 : ret = lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	28 2f       	mov	r18, r24
    30d6:	2c 52       	subi	r18, 0x2C	; 44
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	9b 81       	ldd	r25, Y+3	; 0x03
    30dc:	62 2f       	mov	r22, r18
    30de:	0e 94 9e 10 	call	0x213c	; 0x213c <lcd_4bit_send_command>
    30e2:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    30e6:	27 96       	adiw	r28, 0x07	; 7
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <Dc_Motor_Inialize>:
 *
 * @param motor_obj
 * @return
 */
Std_ReturnType  Dc_Motor_Inialize(motor_cnfg_t * motor_obj)
{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	27 97       	sbiw	r28, 0x07	; 7
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	9f 83       	std	Y+7, r25	; 0x07
    310e:	8e 83       	std	Y+6, r24	; 0x06
	Std_ReturnType ret = E_NOK;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	89 83       	std	Y+1, r24	; 0x01
	/*pin0 */
	pin_config_t  locDc_motor_Pin0 = {.port = motor_obj->dc_pin[0].port,
			.pin = motor_obj->dc_pin[0].pin,.direction = GPIO_PIN_OUTPOT, .logic = LOW};
    3114:	ee 81       	ldd	r30, Y+6	; 0x06
    3116:	ff 81       	ldd	r31, Y+7	; 0x07
    3118:	90 81       	ld	r25, Z
    311a:	ee 81       	ldd	r30, Y+6	; 0x06
    311c:	ff 81       	ldd	r31, Y+7	; 0x07
    311e:	81 81       	ldd	r24, Z+1	; 0x01
    3120:	87 70       	andi	r24, 0x07	; 7
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	98 2f       	mov	r25, r24
    3126:	97 70       	andi	r25, 0x07	; 7
    3128:	8b 81       	ldd	r24, Y+3	; 0x03
    312a:	88 7f       	andi	r24, 0xF8	; 248
    312c:	89 2b       	or	r24, r25
    312e:	8b 83       	std	Y+3, r24	; 0x03
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	87 7f       	andi	r24, 0xF7	; 247
    3134:	8b 83       	std	Y+3, r24	; 0x03
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	8f 7e       	andi	r24, 0xEF	; 239
    313a:	8b 83       	std	Y+3, r24	; 0x03
	/*pin1 */
	pin_config_t  locDc_motor_Pin1 = {.port = motor_obj->dc_pin[1].port,
			.pin = motor_obj->dc_pin[1].pin,.direction = GPIO_PIN_OUTPOT, .logic = LOW};
    313c:	ee 81       	ldd	r30, Y+6	; 0x06
    313e:	ff 81       	ldd	r31, Y+7	; 0x07
    3140:	92 81       	ldd	r25, Z+2	; 0x02
    3142:	ee 81       	ldd	r30, Y+6	; 0x06
    3144:	ff 81       	ldd	r31, Y+7	; 0x07
    3146:	83 81       	ldd	r24, Z+3	; 0x03
    3148:	87 70       	andi	r24, 0x07	; 7
    314a:	9c 83       	std	Y+4, r25	; 0x04
    314c:	98 2f       	mov	r25, r24
    314e:	97 70       	andi	r25, 0x07	; 7
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	88 7f       	andi	r24, 0xF8	; 248
    3154:	89 2b       	or	r24, r25
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	87 7f       	andi	r24, 0xF7	; 247
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	8f 7e       	andi	r24, 0xEF	; 239
    3162:	8d 83       	std	Y+5, r24	; 0x05
	if(NULL == motor_obj)
    3164:	8e 81       	ldd	r24, Y+6	; 0x06
    3166:	9f 81       	ldd	r25, Y+7	; 0x07
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	19 f4       	brne	.+6      	; 0x3172 <Dc_Motor_Inialize+0x7a>
	{
		ret = E_NOK;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	0b c0       	rjmp	.+22     	; 0x3188 <Dc_Motor_Inialize+0x90>
	}
	else
	{
		ret = gpio_pin_initalize(&locDc_motor_Pin0);
    3172:	ce 01       	movw	r24, r28
    3174:	02 96       	adiw	r24, 0x02	; 2
    3176:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    317a:	89 83       	std	Y+1, r24	; 0x01
		ret = gpio_pin_initalize(&locDc_motor_Pin1);
    317c:	ce 01       	movw	r24, r28
    317e:	04 96       	adiw	r24, 0x04	; 4
    3180:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
    3184:	89 83       	std	Y+1, r24	; 0x01
		ret = E_OK;
    3186:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    3188:	89 81       	ldd	r24, Y+1	; 0x01
}
    318a:	27 96       	adiw	r28, 0x07	; 7
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <Dc_Motor_Forward>:
 *
 * @param motor_obj
 * @return
 */
Std_ReturnType  Dc_Motor_Forward(motor_cnfg_t * motor_obj)
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	00 d0       	rcall	.+0      	; 0x31a2 <Dc_Motor_Forward+0x6>
    31a2:	0f 92       	push	r0
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	9b 83       	std	Y+3, r25	; 0x03
    31aa:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == motor_obj)
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	9b 81       	ldd	r25, Y+3	; 0x03
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	19 f4       	brne	.+6      	; 0x31be <Dc_Motor_Forward+0x22>
	{

		ret = E_NOK;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	0c c0       	rjmp	.+24     	; 0x31d6 <Dc_Motor_Forward+0x3a>
	}
	else
	{
		gpio_pin_write_logic(&(motor_obj->dc_pin[0]), HIGH);
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	9b 81       	ldd	r25, Y+3	; 0x03
    31c2:	61 e0       	ldi	r22, 0x01	; 1
    31c4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(motor_obj->dc_pin[1]), LOW);
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	9b 81       	ldd	r25, Y+3	; 0x03
    31cc:	02 96       	adiw	r24, 0x02	; 2
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    31d4:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <Dc_Motor_Backward>:
Std_ReturnType  Dc_Motor_Backward(motor_cnfg_t * motor_obj)
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <Dc_Motor_Backward+0x6>
    31ea:	0f 92       	push	r0
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	9b 83       	std	Y+3, r25	; 0x03
    31f2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == motor_obj)
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	19 f4       	brne	.+6      	; 0x3206 <Dc_Motor_Backward+0x22>
	{
		ret = E_NOK;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	0c c0       	rjmp	.+24     	; 0x321e <Dc_Motor_Backward+0x3a>
	}
	else
	{
		gpio_pin_write_logic(&(motor_obj->dc_pin[0]), LOW);
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	9b 81       	ldd	r25, Y+3	; 0x03
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(motor_obj->dc_pin[1]), HIGH);
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	02 96       	adiw	r24, 0x02	; 2
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    321c:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    321e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <Dc_Motor_Stop>:
 *
 * @param motor_obj
 * @return
 */
Std_ReturnType  Dc_Motor_Stop(motor_cnfg_t * motor_obj)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	00 d0       	rcall	.+0      	; 0x3232 <Dc_Motor_Stop+0x6>
    3232:	0f 92       	push	r0
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	9b 83       	std	Y+3, r25	; 0x03
    323a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == motor_obj)
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	9b 81       	ldd	r25, Y+3	; 0x03
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	19 f4       	brne	.+6      	; 0x324e <Dc_Motor_Stop+0x22>
	{
		ret = E_NOK;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	89 83       	std	Y+1, r24	; 0x01
    324c:	0c c0       	rjmp	.+24     	; 0x3266 <Dc_Motor_Stop+0x3a>
	}
	else
	{
		gpio_pin_write_logic(&(motor_obj->dc_pin[0]), LOW);
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	9b 81       	ldd	r25, Y+3	; 0x03
    3252:	60 e0       	ldi	r22, 0x00	; 0
    3254:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		gpio_pin_write_logic(&(motor_obj->dc_pin[1]), LOW);
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	9b 81       	ldd	r25, Y+3	; 0x03
    325c:	02 96       	adiw	r24, 0x02	; 2
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>
		ret = E_OK;
    3264:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    3266:	89 81       	ldd	r24, Y+1	; 0x01
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <Ecu_Inialize>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/

Std_ReturnType Ecu_Inialize()
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOK;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	89 83       	std	Y+1, r24	; 0x01



	return ret;
    3282:	89 81       	ldd	r24, Y+1	; 0x01
}
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <led_inialize>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_inialize(led_t * led)
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	00 d0       	rcall	.+0      	; 0x3292 <led_inialize+0x6>
    3292:	00 d0       	rcall	.+0      	; 0x3294 <led_inialize+0x8>
    3294:	0f 92       	push	r0
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	9d 83       	std	Y+5, r25	; 0x05
    329c:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    32a2:	8c 81       	ldd	r24, Y+4	; 0x04
    32a4:	9d 81       	ldd	r25, Y+5	; 0x05
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	19 f4       	brne	.+6      	; 0x32b0 <led_inialize+0x24>
	{
		ret = E_NOK;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	28 c0       	rjmp	.+80     	; 0x3300 <led_inialize+0x74>
	}
	else
	{
		pin_config_t  led_pin ={.port = led->port, .pin = led->pin,
				.direction = GPIO_PIN_OUTPOT, .logic = led->status};
    32b0:	ec 81       	ldd	r30, Y+4	; 0x04
    32b2:	fd 81       	ldd	r31, Y+5	; 0x05
    32b4:	20 81       	ld	r18, Z
    32b6:	ec 81       	ldd	r30, Y+4	; 0x04
    32b8:	fd 81       	ldd	r31, Y+5	; 0x05
    32ba:	81 81       	ldd	r24, Z+1	; 0x01
    32bc:	38 2f       	mov	r19, r24
    32be:	37 70       	andi	r19, 0x07	; 7
    32c0:	ec 81       	ldd	r30, Y+4	; 0x04
    32c2:	fd 81       	ldd	r31, Y+5	; 0x05
    32c4:	81 81       	ldd	r24, Z+1	; 0x01
    32c6:	98 2f       	mov	r25, r24
    32c8:	96 95       	lsr	r25
    32ca:	96 95       	lsr	r25
    32cc:	96 95       	lsr	r25
    32ce:	91 70       	andi	r25, 0x01	; 1
    32d0:	2a 83       	std	Y+2, r18	; 0x02
    32d2:	23 2f       	mov	r18, r19
    32d4:	27 70       	andi	r18, 0x07	; 7
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	88 7f       	andi	r24, 0xF8	; 248
    32da:	82 2b       	or	r24, r18
    32dc:	8b 83       	std	Y+3, r24	; 0x03
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	87 7f       	andi	r24, 0xF7	; 247
    32e2:	8b 83       	std	Y+3, r24	; 0x03
    32e4:	89 2f       	mov	r24, r25
    32e6:	81 70       	andi	r24, 0x01	; 1
    32e8:	98 2f       	mov	r25, r24
    32ea:	92 95       	swap	r25
    32ec:	90 7f       	andi	r25, 0xF0	; 240
    32ee:	8b 81       	ldd	r24, Y+3	; 0x03
    32f0:	8f 7e       	andi	r24, 0xEF	; 239
    32f2:	89 2b       	or	r24, r25
    32f4:	8b 83       	std	Y+3, r24	; 0x03
		gpio_pin_initalize(&led_pin);
    32f6:	ce 01       	movw	r24, r28
    32f8:	02 96       	adiw	r24, 0x02	; 2
    32fa:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
		ret = E_OK;
    32fe:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    3300:	89 81       	ldd	r24, Y+1	; 0x01
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <led_turn_on>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_turn_on(led_t * led)
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	00 d0       	rcall	.+0      	; 0x3318 <led_turn_on+0x6>
    3318:	00 d0       	rcall	.+0      	; 0x331a <led_turn_on+0x8>
    331a:	0f 92       	push	r0
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	9d 83       	std	Y+5, r25	; 0x05
    3322:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	89 83       	std	Y+1, r24	; 0x01

	pin_config_t  loc_pin = {.port = led->port,
			.pin = led->pin, .logic = HIGH};
    3328:	ec 81       	ldd	r30, Y+4	; 0x04
    332a:	fd 81       	ldd	r31, Y+5	; 0x05
    332c:	90 81       	ld	r25, Z
    332e:	ec 81       	ldd	r30, Y+4	; 0x04
    3330:	fd 81       	ldd	r31, Y+5	; 0x05
    3332:	81 81       	ldd	r24, Z+1	; 0x01
    3334:	87 70       	andi	r24, 0x07	; 7
    3336:	1b 82       	std	Y+3, r1	; 0x03
    3338:	1a 82       	std	Y+2, r1	; 0x02
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	98 2f       	mov	r25, r24
    333e:	97 70       	andi	r25, 0x07	; 7
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	88 7f       	andi	r24, 0xF8	; 248
    3344:	89 2b       	or	r24, r25
    3346:	8b 83       	std	Y+3, r24	; 0x03
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	80 61       	ori	r24, 0x10	; 16
    334c:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == led)
    334e:	8c 81       	ldd	r24, Y+4	; 0x04
    3350:	9d 81       	ldd	r25, Y+5	; 0x05
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	19 f4       	brne	.+6      	; 0x335c <led_turn_on+0x4a>
	{
		ret = E_NOK;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	06 c0       	rjmp	.+12     	; 0x3368 <led_turn_on+0x56>
	}
	else
	{
		gpio_pin_write_logic(&loc_pin, HIGH);
    335c:	ce 01       	movw	r24, r28
    335e:	02 96       	adiw	r24, 0x02	; 2
    3360:	61 e0       	ldi	r22, 0x01	; 1
    3362:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>

		ret = E_OK;
    3366:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    3368:	89 81       	ldd	r24, Y+1	; 0x01
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <led_turn_off>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_turn_off(led_t * led)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	00 d0       	rcall	.+0      	; 0x3380 <led_turn_off+0x6>
    3380:	00 d0       	rcall	.+0      	; 0x3382 <led_turn_off+0x8>
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	9d 83       	std	Y+5, r25	; 0x05
    338a:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	89 83       	std	Y+1, r24	; 0x01

	pin_config_t  loc_pin = {.port = led->port,
			.pin = led->pin, .logic = LOW};
    3390:	ec 81       	ldd	r30, Y+4	; 0x04
    3392:	fd 81       	ldd	r31, Y+5	; 0x05
    3394:	90 81       	ld	r25, Z
    3396:	ec 81       	ldd	r30, Y+4	; 0x04
    3398:	fd 81       	ldd	r31, Y+5	; 0x05
    339a:	81 81       	ldd	r24, Z+1	; 0x01
    339c:	87 70       	andi	r24, 0x07	; 7
    339e:	1b 82       	std	Y+3, r1	; 0x03
    33a0:	1a 82       	std	Y+2, r1	; 0x02
    33a2:	9a 83       	std	Y+2, r25	; 0x02
    33a4:	98 2f       	mov	r25, r24
    33a6:	97 70       	andi	r25, 0x07	; 7
    33a8:	8b 81       	ldd	r24, Y+3	; 0x03
    33aa:	88 7f       	andi	r24, 0xF8	; 248
    33ac:	89 2b       	or	r24, r25
    33ae:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == led)
    33b0:	8c 81       	ldd	r24, Y+4	; 0x04
    33b2:	9d 81       	ldd	r25, Y+5	; 0x05
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	19 f4       	brne	.+6      	; 0x33be <led_turn_off+0x44>
	{
		ret = E_NOK;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	06 c0       	rjmp	.+12     	; 0x33ca <led_turn_off+0x50>
	}
	else
	{
		gpio_pin_write_logic(&loc_pin, LOW);
    33be:	ce 01       	movw	r24, r28
    33c0:	02 96       	adiw	r24, 0x02	; 2
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>

		ret = E_OK;
    33c8:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <led_toggle>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_toggle(led_t * led)
{
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <led_toggle+0x6>
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <led_toggle+0x8>
    33e4:	0f 92       	push	r0
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	9d 83       	std	Y+5, r25	; 0x05
    33ec:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	89 83       	std	Y+1, r24	; 0x01

	pin_config_t  loc_pin = {.port = led->port,
			.pin = led->pin, .logic = LOW};
    33f2:	ec 81       	ldd	r30, Y+4	; 0x04
    33f4:	fd 81       	ldd	r31, Y+5	; 0x05
    33f6:	90 81       	ld	r25, Z
    33f8:	ec 81       	ldd	r30, Y+4	; 0x04
    33fa:	fd 81       	ldd	r31, Y+5	; 0x05
    33fc:	81 81       	ldd	r24, Z+1	; 0x01
    33fe:	87 70       	andi	r24, 0x07	; 7
    3400:	1b 82       	std	Y+3, r1	; 0x03
    3402:	1a 82       	std	Y+2, r1	; 0x02
    3404:	9a 83       	std	Y+2, r25	; 0x02
    3406:	98 2f       	mov	r25, r24
    3408:	97 70       	andi	r25, 0x07	; 7
    340a:	8b 81       	ldd	r24, Y+3	; 0x03
    340c:	88 7f       	andi	r24, 0xF8	; 248
    340e:	89 2b       	or	r24, r25
    3410:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == led)
    3412:	8c 81       	ldd	r24, Y+4	; 0x04
    3414:	9d 81       	ldd	r25, Y+5	; 0x05
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	19 f4       	brne	.+6      	; 0x3420 <led_toggle+0x44>
	{
		ret = E_NOK;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	05 c0       	rjmp	.+10     	; 0x342a <led_toggle+0x4e>
	}
	else
	{
		gpio_pin_toggle(&loc_pin);
    3420:	ce 01       	movw	r24, r28
    3422:	02 96       	adiw	r24, 0x02	; 2
    3424:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <gpio_pin_toggle>

		ret = E_OK;
    3428:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    342a:	89 81       	ldd	r24, Y+1	; 0x01
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <Relay_Inialize>:

/************************************
 * GLOBAL FUNCTIONS
 ************************************/
Std_ReturnType Relay_Inialize(relay_cnfg_t * relay_obj)
{
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	00 d0       	rcall	.+0      	; 0x3442 <Relay_Inialize+0x6>
    3442:	00 d0       	rcall	.+0      	; 0x3444 <Relay_Inialize+0x8>
    3444:	0f 92       	push	r0
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	9d 83       	std	Y+5, r25	; 0x05
    344c:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == relay_obj)
    3452:	8c 81       	ldd	r24, Y+4	; 0x04
    3454:	9d 81       	ldd	r25, Y+5	; 0x05
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	19 f4       	brne	.+6      	; 0x3460 <Relay_Inialize+0x24>
	{
		ret = E_NOK;
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	24 c0       	rjmp	.+72     	; 0x34a8 <Relay_Inialize+0x6c>
	}
	else
	{
		pin_config_t  Loc_Relay  ={.port = relay_obj->port, .pin = relay_obj->pin,
				.direction = GPIO_PIN_OUTPOT, .logic = relay_obj->relay_state};
    3460:	ec 81       	ldd	r30, Y+4	; 0x04
    3462:	fd 81       	ldd	r31, Y+5	; 0x05
    3464:	20 81       	ld	r18, Z
    3466:	ec 81       	ldd	r30, Y+4	; 0x04
    3468:	fd 81       	ldd	r31, Y+5	; 0x05
    346a:	81 81       	ldd	r24, Z+1	; 0x01
    346c:	98 2f       	mov	r25, r24
    346e:	97 70       	andi	r25, 0x07	; 7
    3470:	ec 81       	ldd	r30, Y+4	; 0x04
    3472:	fd 81       	ldd	r31, Y+5	; 0x05
    3474:	82 81       	ldd	r24, Z+2	; 0x02
    3476:	38 2f       	mov	r19, r24
    3478:	31 70       	andi	r19, 0x01	; 1
    347a:	2a 83       	std	Y+2, r18	; 0x02
    347c:	97 70       	andi	r25, 0x07	; 7
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	88 7f       	andi	r24, 0xF8	; 248
    3482:	89 2b       	or	r24, r25
    3484:	8b 83       	std	Y+3, r24	; 0x03
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	87 7f       	andi	r24, 0xF7	; 247
    348a:	8b 83       	std	Y+3, r24	; 0x03
    348c:	83 2f       	mov	r24, r19
    348e:	81 70       	andi	r24, 0x01	; 1
    3490:	98 2f       	mov	r25, r24
    3492:	92 95       	swap	r25
    3494:	90 7f       	andi	r25, 0xF0	; 240
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	8f 7e       	andi	r24, 0xEF	; 239
    349a:	89 2b       	or	r24, r25
    349c:	8b 83       	std	Y+3, r24	; 0x03
		gpio_pin_initalize(&Loc_Relay);
    349e:	ce 01       	movw	r24, r28
    34a0:	02 96       	adiw	r24, 0x02	; 2
    34a2:	0e 94 30 07 	call	0xe60	; 0xe60 <gpio_pin_initalize>
		ret = E_OK;
    34a6:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <Relay_Turn_on>:
Std_ReturnType Relay_Turn_on(relay_cnfg_t * relay_obj)
{
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <Relay_Turn_on+0x6>
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <Relay_Turn_on+0x8>
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	9d 83       	std	Y+5, r25	; 0x05
    34ca:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	89 83       	std	Y+1, r24	; 0x01

	pin_config_t  loc_Relay = {.port = relay_obj->port,
							   .pin = relay_obj->pin};
    34d0:	ec 81       	ldd	r30, Y+4	; 0x04
    34d2:	fd 81       	ldd	r31, Y+5	; 0x05
    34d4:	90 81       	ld	r25, Z
    34d6:	ec 81       	ldd	r30, Y+4	; 0x04
    34d8:	fd 81       	ldd	r31, Y+5	; 0x05
    34da:	81 81       	ldd	r24, Z+1	; 0x01
    34dc:	87 70       	andi	r24, 0x07	; 7
    34de:	1b 82       	std	Y+3, r1	; 0x03
    34e0:	1a 82       	std	Y+2, r1	; 0x02
    34e2:	9a 83       	std	Y+2, r25	; 0x02
    34e4:	98 2f       	mov	r25, r24
    34e6:	97 70       	andi	r25, 0x07	; 7
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	88 7f       	andi	r24, 0xF8	; 248
    34ec:	89 2b       	or	r24, r25
    34ee:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == relay_obj)
    34f0:	8c 81       	ldd	r24, Y+4	; 0x04
    34f2:	9d 81       	ldd	r25, Y+5	; 0x05
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	19 f4       	brne	.+6      	; 0x34fe <Relay_Turn_on+0x44>
	{
		ret = E_NOK;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	89 83       	std	Y+1, r24	; 0x01
    34fc:	06 c0       	rjmp	.+12     	; 0x350a <Relay_Turn_on+0x50>
	}
	else
	{
		gpio_pin_write_logic(&loc_Relay, HIGH);
    34fe:	ce 01       	movw	r24, r28
    3500:	02 96       	adiw	r24, 0x02	; 2
    3502:	61 e0       	ldi	r22, 0x01	; 1
    3504:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>

		ret = E_OK;
    3508:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    350a:	89 81       	ldd	r24, Y+1	; 0x01
}
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <Relay_Turn_off>:
Std_ReturnType Relay_Turn_off(relay_cnfg_t * relay_obj)
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	00 d0       	rcall	.+0      	; 0x3522 <Relay_Turn_off+0x6>
    3522:	00 d0       	rcall	.+0      	; 0x3524 <Relay_Turn_off+0x8>
    3524:	0f 92       	push	r0
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
    352a:	9d 83       	std	Y+5, r25	; 0x05
    352c:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	89 83       	std	Y+1, r24	; 0x01

	pin_config_t  loc_Relay = {.port = relay_obj->port,
			.pin = relay_obj->pin};
    3532:	ec 81       	ldd	r30, Y+4	; 0x04
    3534:	fd 81       	ldd	r31, Y+5	; 0x05
    3536:	90 81       	ld	r25, Z
    3538:	ec 81       	ldd	r30, Y+4	; 0x04
    353a:	fd 81       	ldd	r31, Y+5	; 0x05
    353c:	81 81       	ldd	r24, Z+1	; 0x01
    353e:	87 70       	andi	r24, 0x07	; 7
    3540:	1b 82       	std	Y+3, r1	; 0x03
    3542:	1a 82       	std	Y+2, r1	; 0x02
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	98 2f       	mov	r25, r24
    3548:	97 70       	andi	r25, 0x07	; 7
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	88 7f       	andi	r24, 0xF8	; 248
    354e:	89 2b       	or	r24, r25
    3550:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == relay_obj)
    3552:	8c 81       	ldd	r24, Y+4	; 0x04
    3554:	9d 81       	ldd	r25, Y+5	; 0x05
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	19 f4       	brne	.+6      	; 0x3560 <Relay_Turn_off+0x44>
	{
		ret = E_NOK;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	89 83       	std	Y+1, r24	; 0x01
    355e:	06 c0       	rjmp	.+12     	; 0x356c <Relay_Turn_off+0x50>
	}
	else
	{
		gpio_pin_write_logic(&loc_Relay, LOW);
    3560:	ce 01       	movw	r24, r28
    3562:	02 96       	adiw	r24, 0x02	; 2
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gpio_pin_write_logic>

		ret = E_OK;
    356a:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    356c:	89 81       	ldd	r24, Y+1	; 0x01
}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <main>:
#define     delay_Time        9000
#define     delay        _delay_ms(delay_Time)

uint8 Loc_Counter = 0;
int main()
{
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	0f 92       	push	r0
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType    ret = E_NOK;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	89 83       	std	Y+1, r24	; 0x01
	application_initialize();
    358c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <application_initialize>
    3590:	ff cf       	rjmp	.-2      	; 0x3590 <main+0x12>

00003592 <application_initialize>:
/**
 *
 * @return
 */
Std_ReturnType application_initialize()
{
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	0f 92       	push	r0
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOK;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	89 83       	std	Y+1, r24	; 0x01

	ret = Ecu_Inialize();
    35a0:	0e 94 3a 19 	call	0x3274	; 0x3274 <Ecu_Inialize>
    35a4:	89 83       	std	Y+1, r24	; 0x01


	return ret;
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    35a8:	0f 90       	pop	r0
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	08 95       	ret

000035b0 <__udivmodqi4>:
    35b0:	99 1b       	sub	r25, r25
    35b2:	79 e0       	ldi	r23, 0x09	; 9
    35b4:	04 c0       	rjmp	.+8      	; 0x35be <__udivmodqi4_ep>

000035b6 <__udivmodqi4_loop>:
    35b6:	99 1f       	adc	r25, r25
    35b8:	96 17       	cp	r25, r22
    35ba:	08 f0       	brcs	.+2      	; 0x35be <__udivmodqi4_ep>
    35bc:	96 1b       	sub	r25, r22

000035be <__udivmodqi4_ep>:
    35be:	88 1f       	adc	r24, r24
    35c0:	7a 95       	dec	r23
    35c2:	c9 f7       	brne	.-14     	; 0x35b6 <__udivmodqi4_loop>
    35c4:	80 95       	com	r24
    35c6:	08 95       	ret

000035c8 <__prologue_saves__>:
    35c8:	2f 92       	push	r2
    35ca:	3f 92       	push	r3
    35cc:	4f 92       	push	r4
    35ce:	5f 92       	push	r5
    35d0:	6f 92       	push	r6
    35d2:	7f 92       	push	r7
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	ca 1b       	sub	r28, r26
    35f2:	db 0b       	sbc	r29, r27
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	09 94       	ijmp

00003600 <__epilogue_restores__>:
    3600:	2a 88       	ldd	r2, Y+18	; 0x12
    3602:	39 88       	ldd	r3, Y+17	; 0x11
    3604:	48 88       	ldd	r4, Y+16	; 0x10
    3606:	5f 84       	ldd	r5, Y+15	; 0x0f
    3608:	6e 84       	ldd	r6, Y+14	; 0x0e
    360a:	7d 84       	ldd	r7, Y+13	; 0x0d
    360c:	8c 84       	ldd	r8, Y+12	; 0x0c
    360e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3610:	aa 84       	ldd	r10, Y+10	; 0x0a
    3612:	b9 84       	ldd	r11, Y+9	; 0x09
    3614:	c8 84       	ldd	r12, Y+8	; 0x08
    3616:	df 80       	ldd	r13, Y+7	; 0x07
    3618:	ee 80       	ldd	r14, Y+6	; 0x06
    361a:	fd 80       	ldd	r15, Y+5	; 0x05
    361c:	0c 81       	ldd	r16, Y+4	; 0x04
    361e:	1b 81       	ldd	r17, Y+3	; 0x03
    3620:	aa 81       	ldd	r26, Y+2	; 0x02
    3622:	b9 81       	ldd	r27, Y+1	; 0x01
    3624:	ce 0f       	add	r28, r30
    3626:	d1 1d       	adc	r29, r1
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	ed 01       	movw	r28, r26
    3634:	08 95       	ret

00003636 <memset>:
    3636:	dc 01       	movw	r26, r24
    3638:	01 c0       	rjmp	.+2      	; 0x363c <memset+0x6>
    363a:	6d 93       	st	X+, r22
    363c:	41 50       	subi	r20, 0x01	; 1
    363e:	50 40       	sbci	r21, 0x00	; 0
    3640:	e0 f7       	brcc	.-8      	; 0x363a <memset+0x4>
    3642:	08 95       	ret

00003644 <sprintf>:
    3644:	ae e0       	ldi	r26, 0x0E	; 14
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	e8 e2       	ldi	r30, 0x28	; 40
    364a:	fb e1       	ldi	r31, 0x1B	; 27
    364c:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__prologue_saves__+0x1c>
    3650:	0d 89       	ldd	r16, Y+21	; 0x15
    3652:	1e 89       	ldd	r17, Y+22	; 0x16
    3654:	86 e0       	ldi	r24, 0x06	; 6
    3656:	8c 83       	std	Y+4, r24	; 0x04
    3658:	1a 83       	std	Y+2, r17	; 0x02
    365a:	09 83       	std	Y+1, r16	; 0x01
    365c:	8f ef       	ldi	r24, 0xFF	; 255
    365e:	9f e7       	ldi	r25, 0x7F	; 127
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
    3664:	9e 01       	movw	r18, r28
    3666:	27 5e       	subi	r18, 0xE7	; 231
    3668:	3f 4f       	sbci	r19, 0xFF	; 255
    366a:	ce 01       	movw	r24, r28
    366c:	01 96       	adiw	r24, 0x01	; 1
    366e:	6f 89       	ldd	r22, Y+23	; 0x17
    3670:	78 8d       	ldd	r23, Y+24	; 0x18
    3672:	a9 01       	movw	r20, r18
    3674:	0e 94 46 1b 	call	0x368c	; 0x368c <vfprintf>
    3678:	2f 81       	ldd	r18, Y+7	; 0x07
    367a:	38 85       	ldd	r19, Y+8	; 0x08
    367c:	02 0f       	add	r16, r18
    367e:	13 1f       	adc	r17, r19
    3680:	f8 01       	movw	r30, r16
    3682:	10 82       	st	Z, r1
    3684:	2e 96       	adiw	r28, 0x0e	; 14
    3686:	e4 e0       	ldi	r30, 0x04	; 4
    3688:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__epilogue_restores__+0x1c>

0000368c <vfprintf>:
    368c:	ab e0       	ldi	r26, 0x0B	; 11
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	ec e4       	ldi	r30, 0x4C	; 76
    3692:	fb e1       	ldi	r31, 0x1B	; 27
    3694:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__prologue_saves__>
    3698:	3c 01       	movw	r6, r24
    369a:	2b 01       	movw	r4, r22
    369c:	5a 01       	movw	r10, r20
    369e:	fc 01       	movw	r30, r24
    36a0:	17 82       	std	Z+7, r1	; 0x07
    36a2:	16 82       	std	Z+6, r1	; 0x06
    36a4:	83 81       	ldd	r24, Z+3	; 0x03
    36a6:	81 fd       	sbrc	r24, 1
    36a8:	03 c0       	rjmp	.+6      	; 0x36b0 <vfprintf+0x24>
    36aa:	6f ef       	ldi	r22, 0xFF	; 255
    36ac:	7f ef       	ldi	r23, 0xFF	; 255
    36ae:	c6 c1       	rjmp	.+908    	; 0x3a3c <vfprintf+0x3b0>
    36b0:	9a e0       	ldi	r25, 0x0A	; 10
    36b2:	89 2e       	mov	r8, r25
    36b4:	1e 01       	movw	r2, r28
    36b6:	08 94       	sec
    36b8:	21 1c       	adc	r2, r1
    36ba:	31 1c       	adc	r3, r1
    36bc:	f3 01       	movw	r30, r6
    36be:	23 81       	ldd	r18, Z+3	; 0x03
    36c0:	f2 01       	movw	r30, r4
    36c2:	23 fd       	sbrc	r18, 3
    36c4:	85 91       	lpm	r24, Z+
    36c6:	23 ff       	sbrs	r18, 3
    36c8:	81 91       	ld	r24, Z+
    36ca:	2f 01       	movw	r4, r30
    36cc:	88 23       	and	r24, r24
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <vfprintf+0x46>
    36d0:	b2 c1       	rjmp	.+868    	; 0x3a36 <vfprintf+0x3aa>
    36d2:	85 32       	cpi	r24, 0x25	; 37
    36d4:	39 f4       	brne	.+14     	; 0x36e4 <vfprintf+0x58>
    36d6:	23 fd       	sbrc	r18, 3
    36d8:	85 91       	lpm	r24, Z+
    36da:	23 ff       	sbrs	r18, 3
    36dc:	81 91       	ld	r24, Z+
    36de:	2f 01       	movw	r4, r30
    36e0:	85 32       	cpi	r24, 0x25	; 37
    36e2:	29 f4       	brne	.+10     	; 0x36ee <vfprintf+0x62>
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	b3 01       	movw	r22, r6
    36e8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    36ec:	e7 cf       	rjmp	.-50     	; 0x36bc <vfprintf+0x30>
    36ee:	98 2f       	mov	r25, r24
    36f0:	ff 24       	eor	r15, r15
    36f2:	ee 24       	eor	r14, r14
    36f4:	99 24       	eor	r9, r9
    36f6:	ff e1       	ldi	r31, 0x1F	; 31
    36f8:	ff 15       	cp	r31, r15
    36fa:	d0 f0       	brcs	.+52     	; 0x3730 <vfprintf+0xa4>
    36fc:	9b 32       	cpi	r25, 0x2B	; 43
    36fe:	69 f0       	breq	.+26     	; 0x371a <vfprintf+0x8e>
    3700:	9c 32       	cpi	r25, 0x2C	; 44
    3702:	28 f4       	brcc	.+10     	; 0x370e <vfprintf+0x82>
    3704:	90 32       	cpi	r25, 0x20	; 32
    3706:	59 f0       	breq	.+22     	; 0x371e <vfprintf+0x92>
    3708:	93 32       	cpi	r25, 0x23	; 35
    370a:	91 f4       	brne	.+36     	; 0x3730 <vfprintf+0xa4>
    370c:	0e c0       	rjmp	.+28     	; 0x372a <vfprintf+0x9e>
    370e:	9d 32       	cpi	r25, 0x2D	; 45
    3710:	49 f0       	breq	.+18     	; 0x3724 <vfprintf+0x98>
    3712:	90 33       	cpi	r25, 0x30	; 48
    3714:	69 f4       	brne	.+26     	; 0x3730 <vfprintf+0xa4>
    3716:	41 e0       	ldi	r20, 0x01	; 1
    3718:	24 c0       	rjmp	.+72     	; 0x3762 <vfprintf+0xd6>
    371a:	52 e0       	ldi	r21, 0x02	; 2
    371c:	f5 2a       	or	r15, r21
    371e:	84 e0       	ldi	r24, 0x04	; 4
    3720:	f8 2a       	or	r15, r24
    3722:	28 c0       	rjmp	.+80     	; 0x3774 <vfprintf+0xe8>
    3724:	98 e0       	ldi	r25, 0x08	; 8
    3726:	f9 2a       	or	r15, r25
    3728:	25 c0       	rjmp	.+74     	; 0x3774 <vfprintf+0xe8>
    372a:	e0 e1       	ldi	r30, 0x10	; 16
    372c:	fe 2a       	or	r15, r30
    372e:	22 c0       	rjmp	.+68     	; 0x3774 <vfprintf+0xe8>
    3730:	f7 fc       	sbrc	r15, 7
    3732:	29 c0       	rjmp	.+82     	; 0x3786 <vfprintf+0xfa>
    3734:	89 2f       	mov	r24, r25
    3736:	80 53       	subi	r24, 0x30	; 48
    3738:	8a 30       	cpi	r24, 0x0A	; 10
    373a:	70 f4       	brcc	.+28     	; 0x3758 <vfprintf+0xcc>
    373c:	f6 fe       	sbrs	r15, 6
    373e:	05 c0       	rjmp	.+10     	; 0x374a <vfprintf+0xbe>
    3740:	98 9c       	mul	r9, r8
    3742:	90 2c       	mov	r9, r0
    3744:	11 24       	eor	r1, r1
    3746:	98 0e       	add	r9, r24
    3748:	15 c0       	rjmp	.+42     	; 0x3774 <vfprintf+0xe8>
    374a:	e8 9c       	mul	r14, r8
    374c:	e0 2c       	mov	r14, r0
    374e:	11 24       	eor	r1, r1
    3750:	e8 0e       	add	r14, r24
    3752:	f0 e2       	ldi	r31, 0x20	; 32
    3754:	ff 2a       	or	r15, r31
    3756:	0e c0       	rjmp	.+28     	; 0x3774 <vfprintf+0xe8>
    3758:	9e 32       	cpi	r25, 0x2E	; 46
    375a:	29 f4       	brne	.+10     	; 0x3766 <vfprintf+0xda>
    375c:	f6 fc       	sbrc	r15, 6
    375e:	6b c1       	rjmp	.+726    	; 0x3a36 <vfprintf+0x3aa>
    3760:	40 e4       	ldi	r20, 0x40	; 64
    3762:	f4 2a       	or	r15, r20
    3764:	07 c0       	rjmp	.+14     	; 0x3774 <vfprintf+0xe8>
    3766:	9c 36       	cpi	r25, 0x6C	; 108
    3768:	19 f4       	brne	.+6      	; 0x3770 <vfprintf+0xe4>
    376a:	50 e8       	ldi	r21, 0x80	; 128
    376c:	f5 2a       	or	r15, r21
    376e:	02 c0       	rjmp	.+4      	; 0x3774 <vfprintf+0xe8>
    3770:	98 36       	cpi	r25, 0x68	; 104
    3772:	49 f4       	brne	.+18     	; 0x3786 <vfprintf+0xfa>
    3774:	f2 01       	movw	r30, r4
    3776:	23 fd       	sbrc	r18, 3
    3778:	95 91       	lpm	r25, Z+
    377a:	23 ff       	sbrs	r18, 3
    377c:	91 91       	ld	r25, Z+
    377e:	2f 01       	movw	r4, r30
    3780:	99 23       	and	r25, r25
    3782:	09 f0       	breq	.+2      	; 0x3786 <vfprintf+0xfa>
    3784:	b8 cf       	rjmp	.-144    	; 0x36f6 <vfprintf+0x6a>
    3786:	89 2f       	mov	r24, r25
    3788:	85 54       	subi	r24, 0x45	; 69
    378a:	83 30       	cpi	r24, 0x03	; 3
    378c:	18 f0       	brcs	.+6      	; 0x3794 <vfprintf+0x108>
    378e:	80 52       	subi	r24, 0x20	; 32
    3790:	83 30       	cpi	r24, 0x03	; 3
    3792:	38 f4       	brcc	.+14     	; 0x37a2 <vfprintf+0x116>
    3794:	44 e0       	ldi	r20, 0x04	; 4
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	a4 0e       	add	r10, r20
    379a:	b5 1e       	adc	r11, r21
    379c:	5f e3       	ldi	r21, 0x3F	; 63
    379e:	59 83       	std	Y+1, r21	; 0x01
    37a0:	0f c0       	rjmp	.+30     	; 0x37c0 <vfprintf+0x134>
    37a2:	93 36       	cpi	r25, 0x63	; 99
    37a4:	31 f0       	breq	.+12     	; 0x37b2 <vfprintf+0x126>
    37a6:	93 37       	cpi	r25, 0x73	; 115
    37a8:	79 f0       	breq	.+30     	; 0x37c8 <vfprintf+0x13c>
    37aa:	93 35       	cpi	r25, 0x53	; 83
    37ac:	09 f0       	breq	.+2      	; 0x37b0 <vfprintf+0x124>
    37ae:	56 c0       	rjmp	.+172    	; 0x385c <vfprintf+0x1d0>
    37b0:	20 c0       	rjmp	.+64     	; 0x37f2 <vfprintf+0x166>
    37b2:	f5 01       	movw	r30, r10
    37b4:	80 81       	ld	r24, Z
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	42 e0       	ldi	r20, 0x02	; 2
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	a4 0e       	add	r10, r20
    37be:	b5 1e       	adc	r11, r21
    37c0:	61 01       	movw	r12, r2
    37c2:	01 e0       	ldi	r16, 0x01	; 1
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	12 c0       	rjmp	.+36     	; 0x37ec <vfprintf+0x160>
    37c8:	f5 01       	movw	r30, r10
    37ca:	c0 80       	ld	r12, Z
    37cc:	d1 80       	ldd	r13, Z+1	; 0x01
    37ce:	f6 fc       	sbrc	r15, 6
    37d0:	03 c0       	rjmp	.+6      	; 0x37d8 <vfprintf+0x14c>
    37d2:	6f ef       	ldi	r22, 0xFF	; 255
    37d4:	7f ef       	ldi	r23, 0xFF	; 255
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <vfprintf+0x150>
    37d8:	69 2d       	mov	r22, r9
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	42 e0       	ldi	r20, 0x02	; 2
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	a4 0e       	add	r10, r20
    37e2:	b5 1e       	adc	r11, r21
    37e4:	c6 01       	movw	r24, r12
    37e6:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <strnlen>
    37ea:	8c 01       	movw	r16, r24
    37ec:	5f e7       	ldi	r21, 0x7F	; 127
    37ee:	f5 22       	and	r15, r21
    37f0:	14 c0       	rjmp	.+40     	; 0x381a <vfprintf+0x18e>
    37f2:	f5 01       	movw	r30, r10
    37f4:	c0 80       	ld	r12, Z
    37f6:	d1 80       	ldd	r13, Z+1	; 0x01
    37f8:	f6 fc       	sbrc	r15, 6
    37fa:	03 c0       	rjmp	.+6      	; 0x3802 <vfprintf+0x176>
    37fc:	6f ef       	ldi	r22, 0xFF	; 255
    37fe:	7f ef       	ldi	r23, 0xFF	; 255
    3800:	02 c0       	rjmp	.+4      	; 0x3806 <vfprintf+0x17a>
    3802:	69 2d       	mov	r22, r9
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	42 e0       	ldi	r20, 0x02	; 2
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	a4 0e       	add	r10, r20
    380c:	b5 1e       	adc	r11, r21
    380e:	c6 01       	movw	r24, r12
    3810:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <strnlen_P>
    3814:	8c 01       	movw	r16, r24
    3816:	50 e8       	ldi	r21, 0x80	; 128
    3818:	f5 2a       	or	r15, r21
    381a:	f3 fe       	sbrs	r15, 3
    381c:	07 c0       	rjmp	.+14     	; 0x382c <vfprintf+0x1a0>
    381e:	1a c0       	rjmp	.+52     	; 0x3854 <vfprintf+0x1c8>
    3820:	80 e2       	ldi	r24, 0x20	; 32
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	b3 01       	movw	r22, r6
    3826:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    382a:	ea 94       	dec	r14
    382c:	8e 2d       	mov	r24, r14
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	08 17       	cp	r16, r24
    3832:	19 07       	cpc	r17, r25
    3834:	a8 f3       	brcs	.-22     	; 0x3820 <vfprintf+0x194>
    3836:	0e c0       	rjmp	.+28     	; 0x3854 <vfprintf+0x1c8>
    3838:	f6 01       	movw	r30, r12
    383a:	f7 fc       	sbrc	r15, 7
    383c:	85 91       	lpm	r24, Z+
    383e:	f7 fe       	sbrs	r15, 7
    3840:	81 91       	ld	r24, Z+
    3842:	6f 01       	movw	r12, r30
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	b3 01       	movw	r22, r6
    3848:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    384c:	e1 10       	cpse	r14, r1
    384e:	ea 94       	dec	r14
    3850:	01 50       	subi	r16, 0x01	; 1
    3852:	10 40       	sbci	r17, 0x00	; 0
    3854:	01 15       	cp	r16, r1
    3856:	11 05       	cpc	r17, r1
    3858:	79 f7       	brne	.-34     	; 0x3838 <vfprintf+0x1ac>
    385a:	ea c0       	rjmp	.+468    	; 0x3a30 <vfprintf+0x3a4>
    385c:	94 36       	cpi	r25, 0x64	; 100
    385e:	11 f0       	breq	.+4      	; 0x3864 <vfprintf+0x1d8>
    3860:	99 36       	cpi	r25, 0x69	; 105
    3862:	69 f5       	brne	.+90     	; 0x38be <vfprintf+0x232>
    3864:	f7 fe       	sbrs	r15, 7
    3866:	08 c0       	rjmp	.+16     	; 0x3878 <vfprintf+0x1ec>
    3868:	f5 01       	movw	r30, r10
    386a:	20 81       	ld	r18, Z
    386c:	31 81       	ldd	r19, Z+1	; 0x01
    386e:	42 81       	ldd	r20, Z+2	; 0x02
    3870:	53 81       	ldd	r21, Z+3	; 0x03
    3872:	84 e0       	ldi	r24, 0x04	; 4
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	0a c0       	rjmp	.+20     	; 0x388c <vfprintf+0x200>
    3878:	f5 01       	movw	r30, r10
    387a:	80 81       	ld	r24, Z
    387c:	91 81       	ldd	r25, Z+1	; 0x01
    387e:	9c 01       	movw	r18, r24
    3880:	44 27       	eor	r20, r20
    3882:	37 fd       	sbrc	r19, 7
    3884:	40 95       	com	r20
    3886:	54 2f       	mov	r21, r20
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a8 0e       	add	r10, r24
    388e:	b9 1e       	adc	r11, r25
    3890:	9f e6       	ldi	r25, 0x6F	; 111
    3892:	f9 22       	and	r15, r25
    3894:	57 ff       	sbrs	r21, 7
    3896:	09 c0       	rjmp	.+18     	; 0x38aa <vfprintf+0x21e>
    3898:	50 95       	com	r21
    389a:	40 95       	com	r20
    389c:	30 95       	com	r19
    389e:	21 95       	neg	r18
    38a0:	3f 4f       	sbci	r19, 0xFF	; 255
    38a2:	4f 4f       	sbci	r20, 0xFF	; 255
    38a4:	5f 4f       	sbci	r21, 0xFF	; 255
    38a6:	e0 e8       	ldi	r30, 0x80	; 128
    38a8:	fe 2a       	or	r15, r30
    38aa:	ca 01       	movw	r24, r20
    38ac:	b9 01       	movw	r22, r18
    38ae:	a1 01       	movw	r20, r2
    38b0:	2a e0       	ldi	r18, 0x0A	; 10
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__ultoa_invert>
    38b8:	d8 2e       	mov	r13, r24
    38ba:	d2 18       	sub	r13, r2
    38bc:	40 c0       	rjmp	.+128    	; 0x393e <vfprintf+0x2b2>
    38be:	95 37       	cpi	r25, 0x75	; 117
    38c0:	29 f4       	brne	.+10     	; 0x38cc <vfprintf+0x240>
    38c2:	1f 2d       	mov	r17, r15
    38c4:	1f 7e       	andi	r17, 0xEF	; 239
    38c6:	2a e0       	ldi	r18, 0x0A	; 10
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	1d c0       	rjmp	.+58     	; 0x3906 <vfprintf+0x27a>
    38cc:	1f 2d       	mov	r17, r15
    38ce:	19 7f       	andi	r17, 0xF9	; 249
    38d0:	9f 36       	cpi	r25, 0x6F	; 111
    38d2:	61 f0       	breq	.+24     	; 0x38ec <vfprintf+0x260>
    38d4:	90 37       	cpi	r25, 0x70	; 112
    38d6:	20 f4       	brcc	.+8      	; 0x38e0 <vfprintf+0x254>
    38d8:	98 35       	cpi	r25, 0x58	; 88
    38da:	09 f0       	breq	.+2      	; 0x38de <vfprintf+0x252>
    38dc:	ac c0       	rjmp	.+344    	; 0x3a36 <vfprintf+0x3aa>
    38de:	0f c0       	rjmp	.+30     	; 0x38fe <vfprintf+0x272>
    38e0:	90 37       	cpi	r25, 0x70	; 112
    38e2:	39 f0       	breq	.+14     	; 0x38f2 <vfprintf+0x266>
    38e4:	98 37       	cpi	r25, 0x78	; 120
    38e6:	09 f0       	breq	.+2      	; 0x38ea <vfprintf+0x25e>
    38e8:	a6 c0       	rjmp	.+332    	; 0x3a36 <vfprintf+0x3aa>
    38ea:	04 c0       	rjmp	.+8      	; 0x38f4 <vfprintf+0x268>
    38ec:	28 e0       	ldi	r18, 0x08	; 8
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	0a c0       	rjmp	.+20     	; 0x3906 <vfprintf+0x27a>
    38f2:	10 61       	ori	r17, 0x10	; 16
    38f4:	14 fd       	sbrc	r17, 4
    38f6:	14 60       	ori	r17, 0x04	; 4
    38f8:	20 e1       	ldi	r18, 0x10	; 16
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <vfprintf+0x27a>
    38fe:	14 fd       	sbrc	r17, 4
    3900:	16 60       	ori	r17, 0x06	; 6
    3902:	20 e1       	ldi	r18, 0x10	; 16
    3904:	32 e0       	ldi	r19, 0x02	; 2
    3906:	17 ff       	sbrs	r17, 7
    3908:	08 c0       	rjmp	.+16     	; 0x391a <vfprintf+0x28e>
    390a:	f5 01       	movw	r30, r10
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	93 81       	ldd	r25, Z+3	; 0x03
    3914:	44 e0       	ldi	r20, 0x04	; 4
    3916:	50 e0       	ldi	r21, 0x00	; 0
    3918:	08 c0       	rjmp	.+16     	; 0x392a <vfprintf+0x29e>
    391a:	f5 01       	movw	r30, r10
    391c:	80 81       	ld	r24, Z
    391e:	91 81       	ldd	r25, Z+1	; 0x01
    3920:	bc 01       	movw	r22, r24
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	42 e0       	ldi	r20, 0x02	; 2
    3928:	50 e0       	ldi	r21, 0x00	; 0
    392a:	a4 0e       	add	r10, r20
    392c:	b5 1e       	adc	r11, r21
    392e:	a1 01       	movw	r20, r2
    3930:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__ultoa_invert>
    3934:	d8 2e       	mov	r13, r24
    3936:	d2 18       	sub	r13, r2
    3938:	8f e7       	ldi	r24, 0x7F	; 127
    393a:	f8 2e       	mov	r15, r24
    393c:	f1 22       	and	r15, r17
    393e:	f6 fe       	sbrs	r15, 6
    3940:	0b c0       	rjmp	.+22     	; 0x3958 <vfprintf+0x2cc>
    3942:	5e ef       	ldi	r21, 0xFE	; 254
    3944:	f5 22       	and	r15, r21
    3946:	d9 14       	cp	r13, r9
    3948:	38 f4       	brcc	.+14     	; 0x3958 <vfprintf+0x2cc>
    394a:	f4 fe       	sbrs	r15, 4
    394c:	07 c0       	rjmp	.+14     	; 0x395c <vfprintf+0x2d0>
    394e:	f2 fc       	sbrc	r15, 2
    3950:	05 c0       	rjmp	.+10     	; 0x395c <vfprintf+0x2d0>
    3952:	8f ee       	ldi	r24, 0xEF	; 239
    3954:	f8 22       	and	r15, r24
    3956:	02 c0       	rjmp	.+4      	; 0x395c <vfprintf+0x2d0>
    3958:	1d 2d       	mov	r17, r13
    395a:	01 c0       	rjmp	.+2      	; 0x395e <vfprintf+0x2d2>
    395c:	19 2d       	mov	r17, r9
    395e:	f4 fe       	sbrs	r15, 4
    3960:	0d c0       	rjmp	.+26     	; 0x397c <vfprintf+0x2f0>
    3962:	fe 01       	movw	r30, r28
    3964:	ed 0d       	add	r30, r13
    3966:	f1 1d       	adc	r31, r1
    3968:	80 81       	ld	r24, Z
    396a:	80 33       	cpi	r24, 0x30	; 48
    396c:	19 f4       	brne	.+6      	; 0x3974 <vfprintf+0x2e8>
    396e:	99 ee       	ldi	r25, 0xE9	; 233
    3970:	f9 22       	and	r15, r25
    3972:	08 c0       	rjmp	.+16     	; 0x3984 <vfprintf+0x2f8>
    3974:	1f 5f       	subi	r17, 0xFF	; 255
    3976:	f2 fe       	sbrs	r15, 2
    3978:	05 c0       	rjmp	.+10     	; 0x3984 <vfprintf+0x2f8>
    397a:	03 c0       	rjmp	.+6      	; 0x3982 <vfprintf+0x2f6>
    397c:	8f 2d       	mov	r24, r15
    397e:	86 78       	andi	r24, 0x86	; 134
    3980:	09 f0       	breq	.+2      	; 0x3984 <vfprintf+0x2f8>
    3982:	1f 5f       	subi	r17, 0xFF	; 255
    3984:	0f 2d       	mov	r16, r15
    3986:	f3 fc       	sbrc	r15, 3
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <vfprintf+0x326>
    398a:	f0 fe       	sbrs	r15, 0
    398c:	0f c0       	rjmp	.+30     	; 0x39ac <vfprintf+0x320>
    398e:	1e 15       	cp	r17, r14
    3990:	10 f0       	brcs	.+4      	; 0x3996 <vfprintf+0x30a>
    3992:	9d 2c       	mov	r9, r13
    3994:	0b c0       	rjmp	.+22     	; 0x39ac <vfprintf+0x320>
    3996:	9d 2c       	mov	r9, r13
    3998:	9e 0c       	add	r9, r14
    399a:	91 1a       	sub	r9, r17
    399c:	1e 2d       	mov	r17, r14
    399e:	06 c0       	rjmp	.+12     	; 0x39ac <vfprintf+0x320>
    39a0:	80 e2       	ldi	r24, 0x20	; 32
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	b3 01       	movw	r22, r6
    39a6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    39aa:	1f 5f       	subi	r17, 0xFF	; 255
    39ac:	1e 15       	cp	r17, r14
    39ae:	c0 f3       	brcs	.-16     	; 0x39a0 <vfprintf+0x314>
    39b0:	04 c0       	rjmp	.+8      	; 0x39ba <vfprintf+0x32e>
    39b2:	1e 15       	cp	r17, r14
    39b4:	10 f4       	brcc	.+4      	; 0x39ba <vfprintf+0x32e>
    39b6:	e1 1a       	sub	r14, r17
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <vfprintf+0x330>
    39ba:	ee 24       	eor	r14, r14
    39bc:	04 ff       	sbrs	r16, 4
    39be:	0f c0       	rjmp	.+30     	; 0x39de <vfprintf+0x352>
    39c0:	80 e3       	ldi	r24, 0x30	; 48
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	b3 01       	movw	r22, r6
    39c6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    39ca:	02 ff       	sbrs	r16, 2
    39cc:	1d c0       	rjmp	.+58     	; 0x3a08 <vfprintf+0x37c>
    39ce:	01 fd       	sbrc	r16, 1
    39d0:	03 c0       	rjmp	.+6      	; 0x39d8 <vfprintf+0x34c>
    39d2:	88 e7       	ldi	r24, 0x78	; 120
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e c0       	rjmp	.+28     	; 0x39f4 <vfprintf+0x368>
    39d8:	88 e5       	ldi	r24, 0x58	; 88
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	0b c0       	rjmp	.+22     	; 0x39f4 <vfprintf+0x368>
    39de:	80 2f       	mov	r24, r16
    39e0:	86 78       	andi	r24, 0x86	; 134
    39e2:	91 f0       	breq	.+36     	; 0x3a08 <vfprintf+0x37c>
    39e4:	01 ff       	sbrs	r16, 1
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <vfprintf+0x360>
    39e8:	8b e2       	ldi	r24, 0x2B	; 43
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <vfprintf+0x362>
    39ec:	80 e2       	ldi	r24, 0x20	; 32
    39ee:	f7 fc       	sbrc	r15, 7
    39f0:	8d e2       	ldi	r24, 0x2D	; 45
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	b3 01       	movw	r22, r6
    39f6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    39fa:	06 c0       	rjmp	.+12     	; 0x3a08 <vfprintf+0x37c>
    39fc:	80 e3       	ldi	r24, 0x30	; 48
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	b3 01       	movw	r22, r6
    3a02:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    3a06:	9a 94       	dec	r9
    3a08:	d9 14       	cp	r13, r9
    3a0a:	c0 f3       	brcs	.-16     	; 0x39fc <vfprintf+0x370>
    3a0c:	da 94       	dec	r13
    3a0e:	f1 01       	movw	r30, r2
    3a10:	ed 0d       	add	r30, r13
    3a12:	f1 1d       	adc	r31, r1
    3a14:	80 81       	ld	r24, Z
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	b3 01       	movw	r22, r6
    3a1a:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    3a1e:	dd 20       	and	r13, r13
    3a20:	a9 f7       	brne	.-22     	; 0x3a0c <vfprintf+0x380>
    3a22:	06 c0       	rjmp	.+12     	; 0x3a30 <vfprintf+0x3a4>
    3a24:	80 e2       	ldi	r24, 0x20	; 32
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	b3 01       	movw	r22, r6
    3a2a:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <fputc>
    3a2e:	ea 94       	dec	r14
    3a30:	ee 20       	and	r14, r14
    3a32:	c1 f7       	brne	.-16     	; 0x3a24 <vfprintf+0x398>
    3a34:	43 ce       	rjmp	.-890    	; 0x36bc <vfprintf+0x30>
    3a36:	f3 01       	movw	r30, r6
    3a38:	66 81       	ldd	r22, Z+6	; 0x06
    3a3a:	77 81       	ldd	r23, Z+7	; 0x07
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	2b 96       	adiw	r28, 0x0b	; 11
    3a40:	e2 e1       	ldi	r30, 0x12	; 18
    3a42:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__epilogue_restores__>

00003a46 <strnlen_P>:
    3a46:	fc 01       	movw	r30, r24
    3a48:	05 90       	lpm	r0, Z+
    3a4a:	61 50       	subi	r22, 0x01	; 1
    3a4c:	70 40       	sbci	r23, 0x00	; 0
    3a4e:	01 10       	cpse	r0, r1
    3a50:	d8 f7       	brcc	.-10     	; 0x3a48 <strnlen_P+0x2>
    3a52:	80 95       	com	r24
    3a54:	90 95       	com	r25
    3a56:	8e 0f       	add	r24, r30
    3a58:	9f 1f       	adc	r25, r31
    3a5a:	08 95       	ret

00003a5c <strnlen>:
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	61 50       	subi	r22, 0x01	; 1
    3a60:	70 40       	sbci	r23, 0x00	; 0
    3a62:	01 90       	ld	r0, Z+
    3a64:	01 10       	cpse	r0, r1
    3a66:	d8 f7       	brcc	.-10     	; 0x3a5e <strnlen+0x2>
    3a68:	80 95       	com	r24
    3a6a:	90 95       	com	r25
    3a6c:	8e 0f       	add	r24, r30
    3a6e:	9f 1f       	adc	r25, r31
    3a70:	08 95       	ret

00003a72 <fputc>:
    3a72:	0f 93       	push	r16
    3a74:	1f 93       	push	r17
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	8c 01       	movw	r16, r24
    3a7c:	eb 01       	movw	r28, r22
    3a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a80:	81 ff       	sbrs	r24, 1
    3a82:	1b c0       	rjmp	.+54     	; 0x3aba <fputc+0x48>
    3a84:	82 ff       	sbrs	r24, 2
    3a86:	0d c0       	rjmp	.+26     	; 0x3aa2 <fputc+0x30>
    3a88:	2e 81       	ldd	r18, Y+6	; 0x06
    3a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a90:	28 17       	cp	r18, r24
    3a92:	39 07       	cpc	r19, r25
    3a94:	64 f4       	brge	.+24     	; 0x3aae <fputc+0x3c>
    3a96:	e8 81       	ld	r30, Y
    3a98:	f9 81       	ldd	r31, Y+1	; 0x01
    3a9a:	01 93       	st	Z+, r16
    3a9c:	f9 83       	std	Y+1, r31	; 0x01
    3a9e:	e8 83       	st	Y, r30
    3aa0:	06 c0       	rjmp	.+12     	; 0x3aae <fputc+0x3c>
    3aa2:	e8 85       	ldd	r30, Y+8	; 0x08
    3aa4:	f9 85       	ldd	r31, Y+9	; 0x09
    3aa6:	80 2f       	mov	r24, r16
    3aa8:	09 95       	icall
    3aaa:	89 2b       	or	r24, r25
    3aac:	31 f4       	brne	.+12     	; 0x3aba <fputc+0x48>
    3aae:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	9f 83       	std	Y+7, r25	; 0x07
    3ab6:	8e 83       	std	Y+6, r24	; 0x06
    3ab8:	02 c0       	rjmp	.+4      	; 0x3abe <fputc+0x4c>
    3aba:	0f ef       	ldi	r16, 0xFF	; 255
    3abc:	1f ef       	ldi	r17, 0xFF	; 255
    3abe:	c8 01       	movw	r24, r16
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	08 95       	ret

00003aca <__ultoa_invert>:
    3aca:	fa 01       	movw	r30, r20
    3acc:	aa 27       	eor	r26, r26
    3ace:	28 30       	cpi	r18, 0x08	; 8
    3ad0:	51 f1       	breq	.+84     	; 0x3b26 <__ultoa_invert+0x5c>
    3ad2:	20 31       	cpi	r18, 0x10	; 16
    3ad4:	81 f1       	breq	.+96     	; 0x3b36 <__ultoa_invert+0x6c>
    3ad6:	e8 94       	clt
    3ad8:	6f 93       	push	r22
    3ada:	6e 7f       	andi	r22, 0xFE	; 254
    3adc:	6e 5f       	subi	r22, 0xFE	; 254
    3ade:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae4:	af 4f       	sbci	r26, 0xFF	; 255
    3ae6:	b1 e0       	ldi	r27, 0x01	; 1
    3ae8:	3e d0       	rcall	.+124    	; 0x3b66 <__ultoa_invert+0x9c>
    3aea:	b4 e0       	ldi	r27, 0x04	; 4
    3aec:	3c d0       	rcall	.+120    	; 0x3b66 <__ultoa_invert+0x9c>
    3aee:	67 0f       	add	r22, r23
    3af0:	78 1f       	adc	r23, r24
    3af2:	89 1f       	adc	r24, r25
    3af4:	9a 1f       	adc	r25, r26
    3af6:	a1 1d       	adc	r26, r1
    3af8:	68 0f       	add	r22, r24
    3afa:	79 1f       	adc	r23, r25
    3afc:	8a 1f       	adc	r24, r26
    3afe:	91 1d       	adc	r25, r1
    3b00:	a1 1d       	adc	r26, r1
    3b02:	6a 0f       	add	r22, r26
    3b04:	71 1d       	adc	r23, r1
    3b06:	81 1d       	adc	r24, r1
    3b08:	91 1d       	adc	r25, r1
    3b0a:	a1 1d       	adc	r26, r1
    3b0c:	20 d0       	rcall	.+64     	; 0x3b4e <__ultoa_invert+0x84>
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <__ultoa_invert+0x48>
    3b10:	68 94       	set
    3b12:	3f 91       	pop	r19
    3b14:	2a e0       	ldi	r18, 0x0A	; 10
    3b16:	26 9f       	mul	r18, r22
    3b18:	11 24       	eor	r1, r1
    3b1a:	30 19       	sub	r19, r0
    3b1c:	30 5d       	subi	r19, 0xD0	; 208
    3b1e:	31 93       	st	Z+, r19
    3b20:	de f6       	brtc	.-74     	; 0x3ad8 <__ultoa_invert+0xe>
    3b22:	cf 01       	movw	r24, r30
    3b24:	08 95       	ret
    3b26:	46 2f       	mov	r20, r22
    3b28:	47 70       	andi	r20, 0x07	; 7
    3b2a:	40 5d       	subi	r20, 0xD0	; 208
    3b2c:	41 93       	st	Z+, r20
    3b2e:	b3 e0       	ldi	r27, 0x03	; 3
    3b30:	0f d0       	rcall	.+30     	; 0x3b50 <__ultoa_invert+0x86>
    3b32:	c9 f7       	brne	.-14     	; 0x3b26 <__ultoa_invert+0x5c>
    3b34:	f6 cf       	rjmp	.-20     	; 0x3b22 <__ultoa_invert+0x58>
    3b36:	46 2f       	mov	r20, r22
    3b38:	4f 70       	andi	r20, 0x0F	; 15
    3b3a:	40 5d       	subi	r20, 0xD0	; 208
    3b3c:	4a 33       	cpi	r20, 0x3A	; 58
    3b3e:	18 f0       	brcs	.+6      	; 0x3b46 <__ultoa_invert+0x7c>
    3b40:	49 5d       	subi	r20, 0xD9	; 217
    3b42:	31 fd       	sbrc	r19, 1
    3b44:	40 52       	subi	r20, 0x20	; 32
    3b46:	41 93       	st	Z+, r20
    3b48:	02 d0       	rcall	.+4      	; 0x3b4e <__ultoa_invert+0x84>
    3b4a:	a9 f7       	brne	.-22     	; 0x3b36 <__ultoa_invert+0x6c>
    3b4c:	ea cf       	rjmp	.-44     	; 0x3b22 <__ultoa_invert+0x58>
    3b4e:	b4 e0       	ldi	r27, 0x04	; 4
    3b50:	a6 95       	lsr	r26
    3b52:	97 95       	ror	r25
    3b54:	87 95       	ror	r24
    3b56:	77 95       	ror	r23
    3b58:	67 95       	ror	r22
    3b5a:	ba 95       	dec	r27
    3b5c:	c9 f7       	brne	.-14     	; 0x3b50 <__ultoa_invert+0x86>
    3b5e:	00 97       	sbiw	r24, 0x00	; 0
    3b60:	61 05       	cpc	r22, r1
    3b62:	71 05       	cpc	r23, r1
    3b64:	08 95       	ret
    3b66:	9b 01       	movw	r18, r22
    3b68:	ac 01       	movw	r20, r24
    3b6a:	0a 2e       	mov	r0, r26
    3b6c:	06 94       	lsr	r0
    3b6e:	57 95       	ror	r21
    3b70:	47 95       	ror	r20
    3b72:	37 95       	ror	r19
    3b74:	27 95       	ror	r18
    3b76:	ba 95       	dec	r27
    3b78:	c9 f7       	brne	.-14     	; 0x3b6c <__ultoa_invert+0xa2>
    3b7a:	62 0f       	add	r22, r18
    3b7c:	73 1f       	adc	r23, r19
    3b7e:	84 1f       	adc	r24, r20
    3b80:	95 1f       	adc	r25, r21
    3b82:	a0 1d       	adc	r26, r0
    3b84:	08 95       	ret

00003b86 <_exit>:
    3b86:	f8 94       	cli

00003b88 <__stop_program>:
    3b88:	ff cf       	rjmp	.-2      	; 0x3b88 <__stop_program>
